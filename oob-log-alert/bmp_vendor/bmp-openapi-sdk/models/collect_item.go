// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectItem collect item
//
// swagger:model CollectItem
type CollectItem struct {

	// 可选参数。 传参:True, False 。True表示传入的raid_driver值将覆盖已适配机器的raid_driver
	AllowOverride *bool `json:"allowOverride,omitempty"`

	// 网关地址
	// Required: true
	Gateway *string `json:"gateway"`

	// 带外IP
	// Required: true
	IloIP *string `json:"iloIp"`

	// 带外密码
	// Required: true
	IloPassword *string `json:"iloPassword"`

	// 带外账号
	// Required: true
	IloUser *string `json:"iloUser"`

	// MAC1（eth0）
	// Required: true
	Mac1 *string `json:"mac1"`

	// 掩码
	// Required: true
	Mask *string `json:"mask"`

	// 内网IPV4
	// Required: true
	PrivateIPV4 *string `json:"privateIpv4"`

	// raid_driver可选参数。传参：sas2ircu，sas3ircu，megacli64，storcli64，perccli64，no_raid。不传参数则只可采集已适配机型，如果未适配则采集失败
	RaidDriver *string `json:"raidDriver,omitempty"`

	// sn
	// Required: true
	Sn *string `json:"sn"`
}

// Validate validates this collect item
func (m *CollectItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIloIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIloPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIloUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectItem) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateIloIP(formats strfmt.Registry) error {

	if err := validate.Required("iloIp", "body", m.IloIP); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateIloPassword(formats strfmt.Registry) error {

	if err := validate.Required("iloPassword", "body", m.IloPassword); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateIloUser(formats strfmt.Registry) error {

	if err := validate.Required("iloUser", "body", m.IloUser); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateMac1(formats strfmt.Registry) error {

	if err := validate.Required("mac1", "body", m.Mac1); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateMask(formats strfmt.Registry) error {

	if err := validate.Required("mask", "body", m.Mask); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validatePrivateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("privateIpv4", "body", m.PrivateIPV4); err != nil {
		return err
	}

	return nil
}

func (m *CollectItem) validateSn(formats strfmt.Registry) error {

	if err := validate.Required("sn", "body", m.Sn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this collect item based on context it is used
func (m *CollectItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CollectItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectItem) UnmarshalBinary(b []byte) error {
	var res CollectItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

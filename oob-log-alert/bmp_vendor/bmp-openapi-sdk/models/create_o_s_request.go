// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOSRequest create o s request
//
// swagger:model CreateOSRequest
type CreateOSRequest struct {

	// 体系架构
	// Required: true
	Architecture *string `json:"architecture"`

	// 位数
	// Required: true
	Bits *int64 `json:"bits"`

	// 操作系统名称
	// Required: true
	OsName *string `json:"osName"`

	// 操作系统平台
	// Required: true
	OsType *string `json:"osType"`

	// 操作系统版本
	// Required: true
	OsVersion *string `json:"osVersion"`

	// 系统用户
	SysUser string `json:"sysUser,omitempty"`
}

// Validate validates this create o s request
func (m *CreateOSRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOSRequest) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *CreateOSRequest) validateBits(formats strfmt.Registry) error {

	if err := validate.Required("bits", "body", m.Bits); err != nil {
		return err
	}

	return nil
}

func (m *CreateOSRequest) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("osName", "body", m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *CreateOSRequest) validateOsType(formats strfmt.Registry) error {

	if err := validate.Required("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *CreateOSRequest) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("osVersion", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create o s request based on context it is used
func (m *CreateOSRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateOSRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOSRequest) UnmarshalBinary(b []byte) error {
	var res CreateOSRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

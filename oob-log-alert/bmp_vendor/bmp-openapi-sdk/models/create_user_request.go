// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserRequest create user request
//
// swagger:model CreateUserRequest
type CreateUserRequest struct {

	// 用户默认项目uuid
	DefaultProjectID string `json:"defaultProjectId,omitempty"`

	// 描述
	Description string `json:"description,omitempty"`

	// 邮箱
	Email string `json:"email,omitempty"`

	// 语言[en_US, zh_CN]
	Language string `json:"language,omitempty"`

	// 密码 明文 密码复杂度校验，大写，小写，数字，特殊字符至少出现3种，且密码长度{8,30}
	// Required: true
	Password *string `json:"password"`

	// 手机号
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// 国家地区码，如86
	PhonePrefix string `json:"phonePrefix,omitempty"`

	// 角色uuid
	// Required: true
	RoleID *string `json:"roleId"`

	// 时区，Asia/Shanghai
	Timezone string `json:"timezone,omitempty"`

	// 用户名，唯一, 1~64字符，只支持数字、大小写字母、英文下划线“_”及中划线“-”
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this create user request
func (m *CreateUserRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUserRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserRequest) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleId", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserRequest) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create user request based on context it is used
func (m *CreateUserRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateUserRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUserRequest) UnmarshalBinary(b []byte) error {
	var res CreateUserRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModifyDeviceTypeRequest modify device type request
//
// swagger:model ModifyDeviceTypeRequest
type ModifyDeviceTypeRequest struct {

	// 体系架构，如i386/x86_64/ ARM64(aarch64)，默认 x86_64
	Architecture *string `json:"architecture,omitempty"`

	// boot模式【UEFI Legacy/BIOS】支持多选，逗号分隔
	BootMode string `json:"boot_mode,omitempty"`

	// cpu数量
	CPUAmount *int64 `json:"cpuAmount,omitempty"`

	// 单个cpu内核数
	CPUCores *int64 `json:"cpuCores,omitempty"`

	// cpu频率(G)
	CPUFrequency *string `json:"cpuFrequency,omitempty"`

	// cpu厂商
	CPUManufacturer *string `json:"cpuManufacturer,omitempty"`

	// cpu处理器型号
	CPUModel *string `json:"cpuModel,omitempty"`

	// CPU 预置规格
	CPUSpec *string `json:"cpuSpec,omitempty"`

	// 数据盘数量
	DataVolumeAmount *int64 `json:"dataVolumeAmount,omitempty"`

	// 数据盘接口类型
	DataVolumeInterfaceType *string `json:"dataVolumeInterfaceType,omitempty"`

	// 数据盘单盘大小
	DataVolumeSize *int64 `json:"dataVolumeSize,omitempty"`

	// 数据盘类型
	DataVolumeType *string `json:"dataVolumeType,omitempty"`

	// 数据盘单盘大小单位
	DataVolumeUnit *string `json:"dataVolumeUnit,omitempty"`

	// 描述
	Description *string `json:"description,omitempty"`

	// 机型类型，如计算型，存储型
	DeviceSeries *string `json:"deviceSeries,omitempty"`

	// 机型规格
	DeviceType *string `json:"deviceType,omitempty"`

	// gpu数量
	GpuAmount *int64 `json:"gpuAmount,omitempty"`

	// gpu厂商
	GpuManufacturer *string `json:"gpuManufacturer,omitempty"`

	// gpu处理器型号
	GpuModel *string `json:"gpuModel,omitempty"`

	// 【高度（U）】：显示机型高度
	Height *int64 `json:"height,omitempty"`

	// 机房id
	IDcID *string `json:"idcId,omitempty"`

	// 【网口模式】【网络设置】: 单网口,双网口bond，single
	InterfaceMode *string `json:"interfaceMode,omitempty"`

	// 内存数量
	MemAmount *int64 `json:"memAmount,omitempty"`

	// 内存主频（MHz)
	MemFrequency *int64 `json:"memFrequency,omitempty"`

	// 单个内存大小(GB)
	MemSize *int64 `json:"memSize,omitempty"`

	// 内存 预置规格
	MemSpec *string `json:"memSpec,omitempty"`

	// 内存接口（如DDR3，DDR4）
	MemType *string `json:"memType,omitempty"`

	// 机型名称
	Name *string `json:"name,omitempty"`

	// 网卡数量
	NicAmount *int64 `json:"nicAmount,omitempty"`

	// 网卡传输速率(GE)
	NicRate *int64 `json:"nicRate,omitempty"`

	// 是否做raid，[RAID/NORAID]
	RaidCan *string `json:"raidCan,omitempty"`

	// 系统盘raid，支持多选,英文逗号分隔
	RaidID *string `json:"raidId,omitempty"`

	// 系统盘数量
	SystemVolumeAmount *int64 `json:"systemVolumeAmount,omitempty"`

	// 系统盘接口类型（SATA,SAS,NVME）
	SystemVolumeInterfaceType *string `json:"systemVolumeInterfaceType,omitempty"`

	// 系统盘单盘大小
	SystemVolumeSize *int64 `json:"systemVolumeSize,omitempty"`

	// 系统盘类型（SSD，HDD）
	SystemVolumeType *string `json:"systemVolumeType,omitempty"`

	// 系统盘单盘大小单位
	SystemVolumeUnit *string `json:"systemVolumeUnit,omitempty"`
}

// Validate validates this modify device type request
func (m *ModifyDeviceTypeRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this modify device type request based on context it is used
func (m *ModifyDeviceTypeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModifyDeviceTypeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModifyDeviceTypeRequest) UnmarshalBinary(b []byte) error {
	var res ModifyDeviceTypeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

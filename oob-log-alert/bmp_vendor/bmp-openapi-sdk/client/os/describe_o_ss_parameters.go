// Code generated by go-swagger; DO NOT EDIT.

package os

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDescribeOSsParams creates a new DescribeOSsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeOSsParams() *DescribeOSsParams {
	return &DescribeOSsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeOSsParamsWithTimeout creates a new DescribeOSsParams object
// with the ability to set a timeout on a request.
func NewDescribeOSsParamsWithTimeout(timeout time.Duration) *DescribeOSsParams {
	return &DescribeOSsParams{
		timeout: timeout,
	}
}

// NewDescribeOSsParamsWithContext creates a new DescribeOSsParams object
// with the ability to set a context for a request.
func NewDescribeOSsParamsWithContext(ctx context.Context) *DescribeOSsParams {
	return &DescribeOSsParams{
		Context: ctx,
	}
}

// NewDescribeOSsParamsWithHTTPClient creates a new DescribeOSsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeOSsParamsWithHTTPClient(client *http.Client) *DescribeOSsParams {
	return &DescribeOSsParams{
		HTTPClient: client,
	}
}

/* DescribeOSsParams contains all the parameters to send to the API endpoint
   for the describe o ss operation.

   Typically these are written to a http.Request.
*/
type DescribeOSsParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* IsAll.

	   是否显示所有
	*/
	IsAll *string

	/* OsName.

	   操作系统名称
	*/
	OsName *string

	/* OsType.

	   操作系统平台
	*/
	OsType *string

	/* OsVersion.

	   操作系统版本
	*/
	OsVersion *string

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe o ss params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeOSsParams) WithDefaults() *DescribeOSsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe o ss params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeOSsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe o ss params
func (o *DescribeOSsParams) WithTimeout(timeout time.Duration) *DescribeOSsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe o ss params
func (o *DescribeOSsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe o ss params
func (o *DescribeOSsParams) WithContext(ctx context.Context) *DescribeOSsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe o ss params
func (o *DescribeOSsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe o ss params
func (o *DescribeOSsParams) WithHTTPClient(client *http.Client) *DescribeOSsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe o ss params
func (o *DescribeOSsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the describe o ss params
func (o *DescribeOSsParams) WithAuthorization(authorization string) *DescribeOSsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe o ss params
func (o *DescribeOSsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe o ss params
func (o *DescribeOSsParams) WithBmpLanguage(bmpLanguage *string) *DescribeOSsParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe o ss params
func (o *DescribeOSsParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe o ss params
func (o *DescribeOSsParams) WithBmpUserID(bmpUserID *string) *DescribeOSsParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe o ss params
func (o *DescribeOSsParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithIsAll adds the isAll to the describe o ss params
func (o *DescribeOSsParams) WithIsAll(isAll *string) *DescribeOSsParams {
	o.SetIsAll(isAll)
	return o
}

// SetIsAll adds the isAll to the describe o ss params
func (o *DescribeOSsParams) SetIsAll(isAll *string) {
	o.IsAll = isAll
}

// WithOsName adds the osName to the describe o ss params
func (o *DescribeOSsParams) WithOsName(osName *string) *DescribeOSsParams {
	o.SetOsName(osName)
	return o
}

// SetOsName adds the osName to the describe o ss params
func (o *DescribeOSsParams) SetOsName(osName *string) {
	o.OsName = osName
}

// WithOsType adds the osType to the describe o ss params
func (o *DescribeOSsParams) WithOsType(osType *string) *DescribeOSsParams {
	o.SetOsType(osType)
	return o
}

// SetOsType adds the osType to the describe o ss params
func (o *DescribeOSsParams) SetOsType(osType *string) {
	o.OsType = osType
}

// WithOsVersion adds the osVersion to the describe o ss params
func (o *DescribeOSsParams) WithOsVersion(osVersion *string) *DescribeOSsParams {
	o.SetOsVersion(osVersion)
	return o
}

// SetOsVersion adds the osVersion to the describe o ss params
func (o *DescribeOSsParams) SetOsVersion(osVersion *string) {
	o.OsVersion = osVersion
}

// WithTraceID adds the traceID to the describe o ss params
func (o *DescribeOSsParams) WithTraceID(traceID string) *DescribeOSsParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe o ss params
func (o *DescribeOSsParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeOSsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.IsAll != nil {

		// query param isAll
		var qrIsAll string

		if o.IsAll != nil {
			qrIsAll = *o.IsAll
		}
		qIsAll := qrIsAll
		if qIsAll != "" {

			if err := r.SetQueryParam("isAll", qIsAll); err != nil {
				return err
			}
		}
	}

	if o.OsName != nil {

		// query param osName
		var qrOsName string

		if o.OsName != nil {
			qrOsName = *o.OsName
		}
		qOsName := qrOsName
		if qOsName != "" {

			if err := r.SetQueryParam("osName", qOsName); err != nil {
				return err
			}
		}
	}

	if o.OsType != nil {

		// query param osType
		var qrOsType string

		if o.OsType != nil {
			qrOsType = *o.OsType
		}
		qOsType := qrOsType
		if qOsType != "" {

			if err := r.SetQueryParam("osType", qOsType); err != nil {
				return err
			}
		}
	}

	if o.OsVersion != nil {

		// query param osVersion
		var qrOsVersion string

		if o.OsVersion != nil {
			qrOsVersion = *o.OsVersion
		}
		qOsVersion := qrOsVersion
		if qOsVersion != "" {

			if err := r.SetQueryParam("osVersion", qOsVersion); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package raid

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new raid API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for raid API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDeviceTypeRaid(params *CreateDeviceTypeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceTypeRaidOK, error)

	CreateRaid(params *CreateRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRaidOK, error)

	DeleteDeviceTypeRaid(params *DeleteDeviceTypeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceTypeRaidOK, error)

	DeleteRaid(params *DeleteRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRaidOK, error)

	DescribeRaid(params *DescribeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRaidOK, error)

	DescribeRaids(params *DescribeRaidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRaidsOK, error)

	ModifyRaid(params *ModifyRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyRaidOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDeviceTypeRaid CreateDeviceTypeRaid ... 机型和raid关联(暂不启用)
*/
func (a *Client) CreateDeviceTypeRaid(params *CreateDeviceTypeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceTypeRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceTypeRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDeviceTypeRaid",
		Method:             "POST",
		PathPattern:        "/raids/deviceTypeRaid",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeviceTypeRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceTypeRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDeviceTypeRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateRaid CreateRaid 创建raid(暂不启用)
*/
func (a *Client) CreateRaid(params *CreateRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRaid",
		Method:             "POST",
		PathPattern:        "/raids",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDeviceTypeRaid DeleteDeviceTypeRaid ... 机型和raid解绑(暂不启用)
*/
func (a *Client) DeleteDeviceTypeRaid(params *DeleteDeviceTypeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceTypeRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceTypeRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDeviceTypeRaid",
		Method:             "DELETE",
		PathPattern:        "/raids/deviceTypeRaid",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeviceTypeRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceTypeRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDeviceTypeRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteRaid DeleteRaid 删除raid(暂不启用)
*/
func (a *Client) DeleteRaid(params *DeleteRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRaid",
		Method:             "DELETE",
		PathPattern:        "/raids/{raid_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeRaid DescribeRaid 获取raid详情
*/
func (a *Client) DescribeRaid(params *DescribeRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeRaid",
		Method:             "GET",
		PathPattern:        "/raids/{raid_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeRaids DescribeRaids 获取raid列表
*/
func (a *Client) DescribeRaids(params *DescribeRaidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRaidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRaidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeRaids",
		Method:             "GET",
		PathPattern:        "/raids",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRaidsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRaidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRaidsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyRaid ModifyRaid 修改raid信息(暂不启用)
*/
func (a *Client) ModifyRaid(params *ModifyRaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyRaid",
		Method:             "PUT",
		PathPattern:        "/raids/{raid_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyRaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyRaidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserApikey(params *CreateUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserApikeyOK, error)

	DeleteUserApikey(params *DeleteUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserApikeyOK, error)

	DescribeUserAPIKey(params *DescribeUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserAPIKeyOK, error)

	DescribeUserAPIKeys(params *DescribeUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserAPIKeysOK, error)

	ModifyUserApikey(params *ModifyUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserApikeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserApikey CreateUserApikey 创建apikey
*/
func (a *Client) CreateUserApikey(params *CreateUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserApikeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserApikeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserApikey",
		Method:             "POST",
		PathPattern:        "/user/apikeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserApikeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserApikeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUserApikey DeleteUserApikey 删除某个apikey
*/
func (a *Client) DeleteUserApikey(params *DeleteUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserApikeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserApikeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserApikey",
		Method:             "DELETE",
		PathPattern:        "/user/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserApikeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserApikeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserAPIKey DescribeUserAPIKey 获取apikey详情
*/
func (a *Client) DescribeUserAPIKey(params *DescribeUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserAPIKey",
		Method:             "GET",
		PathPattern:        "/user/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserAPIKeys DescribeUserAPIKeys 获取APIKey列表
*/
func (a *Client) DescribeUserAPIKeys(params *DescribeUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserAPIKeys",
		Method:             "GET",
		PathPattern:        "/user/apikeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyUserApikey ModifyUserApikey 修改apikey(暂不启用)
*/
func (a *Client) ModifyUserApikey(params *ModifyUserApikeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserApikeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserApikeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyUserApikey",
		Method:             "PUT",
		PathPattern:        "/user/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyUserApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyUserApikeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyUserApikeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

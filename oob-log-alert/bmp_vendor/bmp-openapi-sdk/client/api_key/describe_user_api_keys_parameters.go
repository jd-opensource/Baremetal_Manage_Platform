// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDescribeUserAPIKeysParams creates a new DescribeUserAPIKeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeUserAPIKeysParams() *DescribeUserAPIKeysParams {
	return &DescribeUserAPIKeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeUserAPIKeysParamsWithTimeout creates a new DescribeUserAPIKeysParams object
// with the ability to set a timeout on a request.
func NewDescribeUserAPIKeysParamsWithTimeout(timeout time.Duration) *DescribeUserAPIKeysParams {
	return &DescribeUserAPIKeysParams{
		timeout: timeout,
	}
}

// NewDescribeUserAPIKeysParamsWithContext creates a new DescribeUserAPIKeysParams object
// with the ability to set a context for a request.
func NewDescribeUserAPIKeysParamsWithContext(ctx context.Context) *DescribeUserAPIKeysParams {
	return &DescribeUserAPIKeysParams{
		Context: ctx,
	}
}

// NewDescribeUserAPIKeysParamsWithHTTPClient creates a new DescribeUserAPIKeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeUserAPIKeysParamsWithHTTPClient(client *http.Client) *DescribeUserAPIKeysParams {
	return &DescribeUserAPIKeysParams{
		HTTPClient: client,
	}
}

/* DescribeUserAPIKeysParams contains all the parameters to send to the API endpoint
   for the describe user API keys operation.

   Typically these are written to a http.Request.
*/
type DescribeUserAPIKeysParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* IsAll.

	   是否查询全部/导出
	*/
	IsAll *string

	/* Name.

	   秘钥对名称
	*/
	Name *string

	/* PageNumber.

	   页码

	   Format: int64
	*/
	PageNumber *int64

	/* PageSize.

	   每页数量

	   Format: int64
	*/
	PageSize *int64

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	/* Type.

	   Token类型, [system/user]
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe user API keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeUserAPIKeysParams) WithDefaults() *DescribeUserAPIKeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe user API keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeUserAPIKeysParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithTimeout(timeout time.Duration) *DescribeUserAPIKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithContext(ctx context.Context) *DescribeUserAPIKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithHTTPClient(client *http.Client) *DescribeUserAPIKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithAuthorization(authorization string) *DescribeUserAPIKeysParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithBmpLanguage(bmpLanguage *string) *DescribeUserAPIKeysParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithBmpUserID(bmpUserID *string) *DescribeUserAPIKeysParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithIsAll adds the isAll to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithIsAll(isAll *string) *DescribeUserAPIKeysParams {
	o.SetIsAll(isAll)
	return o
}

// SetIsAll adds the isAll to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetIsAll(isAll *string) {
	o.IsAll = isAll
}

// WithName adds the name to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithName(name *string) *DescribeUserAPIKeysParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithPageNumber(pageNumber *int64) *DescribeUserAPIKeysParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithPageSize(pageSize *int64) *DescribeUserAPIKeysParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithTraceID adds the traceID to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithTraceID(traceID string) *DescribeUserAPIKeysParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WithType adds the typeVar to the describe user API keys params
func (o *DescribeUserAPIKeysParams) WithType(typeVar *string) *DescribeUserAPIKeysParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the describe user API keys params
func (o *DescribeUserAPIKeysParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeUserAPIKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.IsAll != nil {

		// query param isAll
		var qrIsAll string

		if o.IsAll != nil {
			qrIsAll = *o.IsAll
		}
		qIsAll := qrIsAll
		if qIsAll != "" {

			if err := r.SetQueryParam("isAll", qIsAll); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

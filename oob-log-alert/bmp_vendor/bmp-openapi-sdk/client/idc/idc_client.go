// Code generated by go-swagger; DO NOT EDIT.

package idc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new idc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for idc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIdc(params *CreateIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdcOK, error)

	DeleteIdc(params *DeleteIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIdcOK, error)

	DescribeIdc(params *DescribeIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeIdcOK, error)

	DescribeIdcs(params *DescribeIdcsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeIdcsOK, error)

	ModifyIdc(params *ModifyIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyIdcOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateIdc CreateIdc 创建idc(接口废弃，不对外开放)
*/
func (a *Client) CreateIdc(params *CreateIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIdcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIdc",
		Method:             "POST",
		PathPattern:        "/idcs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIdcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIdcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateIdcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteIdc DeleteIdc 删除idc
*/
func (a *Client) DeleteIdc(params *DeleteIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIdcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIdcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIdc",
		Method:             "DELETE",
		PathPattern:        "/idcs/{idc_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIdcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIdcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIdcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeIdc DescribeIdc 获取idc详情
*/
func (a *Client) DescribeIdc(params *DescribeIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeIdcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeIdcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeIdc",
		Method:             "GET",
		PathPattern:        "/idcs/{idc_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeIdcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeIdcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeIdcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeIdcs DescribeIdcs 获取idc列表
*/
func (a *Client) DescribeIdcs(params *DescribeIdcsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeIdcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeIdcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeIdcs",
		Method:             "GET",
		PathPattern:        "/idcs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeIdcsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeIdcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeIdcsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyIdc ModifyIdc 修改idc信息
*/
func (a *Client) ModifyIdc(params *ModifyIdcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyIdcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyIdcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyIdc",
		Method:             "PUT",
		PathPattern:        "/idcs/{idc_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyIdcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyIdcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyIdcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

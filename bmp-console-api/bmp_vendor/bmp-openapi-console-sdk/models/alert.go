// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Alert alert
//
// swagger:model Alert
type Alert struct {

	// alert uuid
	AlertID string `json:"alertId,omitempty"`

	// 1表示一般，2表示严重，3表示紧急
	AlertLevel int64 `json:"alertLevel,omitempty"`

	// 级别描述
	AlertLevelDescription string `json:"alertLevelDescription,omitempty"`

	// 告警持续时间(分钟为单位)
	AlertPeriod int64 `json:"alertPeriod,omitempty"`

	// 告警时间戳
	AlertTime int64 `json:"alertTime,omitempty"`

	// 报警值
	AlertValue string `json:"alertValue,omitempty"`

	// 创建时间戳
	CreatedTime int64 `json:"createdTime,omitempty"`

	// 资源类型 [只支持instance一种]
	Resource string `json:"resource,omitempty"`

	// 资源id,目前就是实例id
	ResourceID string `json:"resourceId,omitempty"`

	// 资源名称,目前就是实例名称
	ResourceName string `json:"resourceName,omitempty"`

	// 触发条件,接口需要翻译
	Trigger string `json:"trigger,omitempty"`

	// 触发条件描述
	TriggerDescription string `json:"triggerDescription,omitempty"`

	// 通知对象 userid
	UserID string `json:"userId,omitempty"`

	// 通知对象 用户名
	UserName string `json:"userName,omitempty"`

	// instance
	Instance *Instance `json:"instance,omitempty"`

	// rule
	Rule *Rule `json:"rule,omitempty"`
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) validateInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {
		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert based on the context it is used
func (m *Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.Instance != nil {
		if err := m.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {
		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

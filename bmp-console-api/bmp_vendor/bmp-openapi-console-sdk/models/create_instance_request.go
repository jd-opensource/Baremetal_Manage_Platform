// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInstanceRequest create instance request
//
// swagger:model CreateInstanceRequest
type CreateInstanceRequest struct {

	// 启动模式
	BootMode string `json:"bootMode,omitempty"`

	// 创建数量
	Count int64 `json:"count,omitempty"`

	// 描述
	Description string `json:"description,omitempty"`

	// 设备类型ID
	// Required: true
	DeviceTypeID *string `json:"deviceTypeId"`

	// 主机名称
	HostName string `json:"hostname,omitempty"`

	// 机房ID
	// Required: true
	IdcID *string `json:"idcId"`

	// 镜像ID
	// Required: true
	ImageID *string `json:"imageId"`

	// 是否安装bmp-agent
	InstallBmpAgent bool `json:"installBmpAgent,omitempty"`

	// 实例名称
	// Required: true
	InstanceName *string `json:"instanceName"`

	// 密码
	Password string `json:"password,omitempty"`

	// 项目ID
	// Required: true
	ProjectID *string `json:"projectId"`

	// 秘钥ID
	SSHKeyID string `json:"sshKeyId,omitempty"`

	// 系统盘分区
	SystemPartition []*Partition `json:"systemPartition"`

	// 系统盘RAID ID
	// Required: true
	SystemVolumeRaidID *string `json:"systemVolumeRaidId"`

	// 数据卷和选择的raidid
	VolumeRaIDs []*VolumeRaID `json:"VolumeRaids"`
}

// Validate validates this create instance request
func (m *CreateInstanceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdcID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemVolumeRaidID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeRaIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInstanceRequest) validateDeviceTypeID(formats strfmt.Registry) error {

	if err := validate.Required("deviceTypeId", "body", m.DeviceTypeID); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateIdcID(formats strfmt.Registry) error {

	if err := validate.Required("idcId", "body", m.IdcID); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("imageId", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateInstanceName(formats strfmt.Registry) error {

	if err := validate.Required("instanceName", "body", m.InstanceName); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateSystemPartition(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemPartition) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemPartition); i++ {
		if swag.IsZero(m.SystemPartition[i]) { // not required
			continue
		}

		if m.SystemPartition[i] != nil {
			if err := m.SystemPartition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemPartition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemPartition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateInstanceRequest) validateSystemVolumeRaidID(formats strfmt.Registry) error {

	if err := validate.Required("systemVolumeRaidId", "body", m.SystemVolumeRaidID); err != nil {
		return err
	}

	return nil
}

func (m *CreateInstanceRequest) validateVolumeRaIDs(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeRaIDs) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeRaIDs); i++ {
		if swag.IsZero(m.VolumeRaIDs[i]) { // not required
			continue
		}

		if m.VolumeRaIDs[i] != nil {
			if err := m.VolumeRaIDs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VolumeRaids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VolumeRaids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create instance request based on the context it is used
func (m *CreateInstanceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSystemPartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeRaIDs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInstanceRequest) contextValidateSystemPartition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemPartition); i++ {

		if m.SystemPartition[i] != nil {
			if err := m.SystemPartition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemPartition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemPartition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateInstanceRequest) contextValidateVolumeRaIDs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeRaIDs); i++ {

		if m.VolumeRaIDs[i] != nil {
			if err := m.VolumeRaIDs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VolumeRaids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VolumeRaids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateInstanceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateInstanceRequest) UnmarshalBinary(b []byte) error {
	var res CreateInstanceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

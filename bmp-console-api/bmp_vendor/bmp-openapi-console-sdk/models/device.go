// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
//
// swagger:model Device
type Device struct {

	// adapter_id
	AdapterID int64 `json:"adapterId,omitempty"`

	// 体系架构，如i386/x86_64/ ARM64 (aarch64)，默认 x86_64
	Architecture string `json:"architecture,omitempty"`

	// 品牌
	Brand string `json:"brand,omitempty"`

	// cpu数量
	CPUAmount int64 `json:"cpuAmount,omitempty"`

	// 单个cpu内核数
	CPUCores int64 `json:"cpuCores,omitempty"`

	// cpu频率(G)
	CPUFrequency string `json:"cpuFrequency,omitempty"`

	// cpu厂商
	CPUManufacturer string `json:"cpuManufacturer,omitempty"`

	// cpu处理器型号
	CPUModel string `json:"cpuModel,omitempty"`

	// 单个cpu路数
	CPURoads int8 `json:"cpuRoads,omitempty"`

	// 机柜编码
	Cabinet string `json:"cabinet,omitempty"`

	// 拼装信息
	CPUInfo string `json:"cpuInfo,omitempty"`

	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// 数据盘数量
	DataVolumeAmount int64 `json:"dataVolumeAmount,omitempty"`

	// 数据盘接口类型（SATA,SAS,NVME）
	DataVolumeInterfaceType string `json:"dataVolumeInterfaceType,omitempty"`

	// 数据盘单盘大小
	DataVolumeSize int64 `json:"dataVolumeSize,omitempty"`

	// 数据盘类型（SSD，HDD）
	DataVolumeType string `json:"dataVolumeType,omitempty"`

	// 描述
	Description string `json:"description,omitempty"`

	// 设备uuid
	DeviceID string `json:"deviceId,omitempty"`

	// 计算型，存储型
	DeviceSeries string `json:"deviceSeries,omitempty"`

	// 计算型，存储型
	DeviceSeriesName string `json:"deviceSeriesName,omitempty"`

	// 型号，机型规格cps.normal
	DeviceType string `json:"deviceType,omitempty"`

	// 机型uuid
	DeviceTypeID string `json:"deviceTypeId,omitempty"`

	// 机型名称
	DeviceTypeName string `json:"deviceTypeName,omitempty"`

	// dv info
	DvInfo string `json:"dvInfo,omitempty"`

	// 添加到disk表, 系统盘1背板号
	Enclosure1 string `json:"enclosure1,omitempty"`

	// 系统盘2背板号
	Enclosure2 string `json:"Enclosure2,omitempty"`

	// eth1子网掩码
	Eth1Mask string `json:"eth1Mask,omitempty"`

	// 网关地址
	Gateway string `json:"gateway,omitempty"`

	// gpu数量
	GpuAmount int64 `json:"gpuAmount,omitempty"`

	// gpu info
	GpuInfo string `json:"gpuInfo,omitempty"`

	// gpu厂商
	GpuManufacturer string `json:"gpuManufacturer,omitempty"`

	// gpu处理器型号
	GpuModel string `json:"gpuModel,omitempty"`

	// 设备ID编号
	ID int64 `json:"id,omitempty"`

	// idcname
	IDcNameEn string `json:"idcNameEn,omitempty"`

	// 机房uuid
	// Required: true
	IdcID *string `json:"idcId"`

	// 机房名称
	IdcName string `json:"idcName,omitempty"`

	// 带外管理IP
	IloIP string `json:"iloIp,omitempty"`

	// 带外账号密码
	IloPassword string `json:"iloPassword,omitempty"`

	// 带外账号
	IloUser string `json:"iloUser,omitempty"`

	// 实例镜像名称
	ImageName string `json:"imageName,omitempty"`

	// 实例创建时间
	InstanceCreatedTime string `json:"instanceCreatedTime,omitempty"`

	// 实例描述
	InstanceDescription string `json:"instanceDescription,omitempty"`

	// 实例id
	InstanceID string `json:"instanceId,omitempty"`

	// 实例名称
	InstanceName string `json:"instanceName,omitempty"`

	// 实例失败原因
	InstanceReason string `json:"instanceReason,omitempty"`

	// 实例状态
	InstanceStatus string `json:"instanceStatus,omitempty"`

	// 实例状态
	InstanceStatusName string `json:"instanceStatusName,omitempty"`

	// 【网口模式】【网络设置】: bond单网口,dual双网口
	InterfaceMode string `json:"interfaceMode,omitempty"`

	// 实例是否锁定 锁定locked 未锁定unlocked
	Locked string `json:"locked,omitempty"`

	// MAC1（eth0）
	Mac1 string `json:"mac1,omitempty"`

	// MAC2（eth2）
	Mac2 string `json:"mac2,omitempty"`

	// 设备状态: 未装机，已装机
	ManageStatus string `json:"manageStatus,omitempty"`

	// 设备状态: 未装机，已装机
	ManageStatusName string `json:"manageStatusName,omitempty"`

	// 子网掩码
	Mask string `json:"mask,omitempty"`

	// 内存数量
	MemAmount int64 `json:"memAmount,omitempty"`

	// 内存主频（MHz)
	MemFrequency int64 `json:"memFrequency,omitempty"`

	// mem info
	MemInfo string `json:"memInfo,omitempty"`

	// 单个内存大小(GB)
	MemSize int64 `json:"memSize,omitempty"`

	// 内存接口（如DDR3，DDR4）
	MemType string `json:"memType,omitempty"`

	// 型号
	Model string `json:"model,omitempty"`

	// 网卡数量
	NicAmount int64 `json:"nicAmount,omitempty"`

	// nic info
	NicInfo string `json:"nicInfo,omitempty"`

	// 网卡传输速率(GE)
	NicRate int64 `json:"nicRate,omitempty"`

	// eth1内网IPV4
	PrivateEth1IPV4 string `json:"privateEth1Ipv4,omitempty"`

	// eth1内网IPV6
	PrivateEth1IPV6 string `json:"privateEth1Ipv6,omitempty"`

	// 内网IPV4
	PrivateIPV4 string `json:"privateIpv4,omitempty"`

	// 内网IPV6
	PrivateIPV6 string `json:"privateIpv6,omitempty"`

	// raid工具：（megacli64等）
	RaidDriver string `json:"raidDriver,omitempty"`

	// 设备状态变更失败原因
	Reason string `json:"reason,omitempty"`

	// 系统盘1槽位
	Slot1 int64 `json:"slot1,omitempty"`

	// 系统盘2槽位
	Slot2 int64 `json:"slot2,omitempty"`

	// 设备SN
	Sn string `json:"sn,omitempty"`

	// sv info
	SvInfo string `json:"svInfo,omitempty"`

	// 网口交换机IP
	SwitchIP string `json:"switchIp,omitempty"`

	// 交换机1ip
	SwitchIP1 string `json:"switchIp1,omitempty"`

	// 交换机2ip
	SwitchIP2 string `json:"switchIp2,omitempty"`

	// 交换机1登录密码
	SwitchPassword1 string `json:"switchPassword1,omitempty"`

	// 交换机2登录密码
	SwitchPassword2 string `json:"switchPassword2,omitempty"`

	// 交换机1port
	SwitchPort1 string `json:"switchPort1,omitempty"`

	// 交换机2port
	SwitchPort2 string `json:"switchPort2,omitempty"`

	// 交换机1登录账号，如果为空，取所在机房的值
	SwitchUser1 string `json:"switchUser1,omitempty"`

	// 交换机2登录账号，如果为空，取所在机房的值
	SwitchUser2 string `json:"switchUser2,omitempty"`

	// 系统盘数量
	SystemVolumeAmount int64 `json:"systemVolumeAmount,omitempty"`

	// 系统盘接口类型（SATA,SAS,NVME）
	SystemVolumeInterfaceType string `json:"systemVolumeInterfaceType,omitempty"`

	// 系统盘单盘大小
	SystemVolumeSize int64 `json:"systemVolumeSize,omitempty"`

	// 系统盘类型（SSD，HDD）
	SystemVolumeType string `json:"systemVolumeType,omitempty"`

	// U位
	UPosition string `json:"uPosition,omitempty"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`

	// 实例归属用户uuid
	UserID string `json:"userId,omitempty"`

	// 实例归属用户名称
	UserName string `json:"userName,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateIdcID(formats strfmt.Registry) error {

	if err := validate.Required("idcId", "body", m.IdcID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device based on context it is used
func (m *Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

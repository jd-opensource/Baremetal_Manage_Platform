// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuleTrigger 单个触发条件
//
// swagger:model RuleTrigger
type RuleTrigger struct {

	// 计算方式 [min max avg sum]
	// Required: true
	Calculation *string `json:"calculation"`

	// 计算结果单位 [对于使用量，有Bytes,KB,MB,GB,TB，对于使用率，是%，对于连接个数，是count，对于网络包量，是pps,Kpps,Mpps,Gpps,Tpps，对于网络速率，是bps,Kbps,Mbps,Gbps,Tbps 对于负载，没有单位。。。。。。产品需详细列出]
	CalculationUnit string `json:"calculationUnit,omitempty"`

	// 对此rule的描述
	Description string `json:"description,omitempty"`

	// 监控指标 cps.cpu.util
	// Required: true
	Metric *string `json:"metric"`

	// 监控指标名称 CPU使用率
	MetricName string `json:"metricName,omitempty"`

	// 告警级别 [1表示一般，2表示严重，3表示紧急]
	// Required: true
	NoticeLevel *int64 `json:"noticeLevel"`

	// 比较方式 [> >= < <= == !=]或者[gt gte lt lte eq neq]
	// Required: true
	Operation *string `json:"operation"`

	// 周期 5(分钟)
	// Required: true
	Period *int64 `json:"period"`

	// [bmp_monitor_counter, bmp_monitor_gauge]
	TableName string `json:"tableName,omitempty"`

	// 阈值
	// Required: true
	Threshold *float64 `json:"threshold"`

	// 持续周期数 [1, 2, 3, 5, 10, 15, 30, 60]
	// Required: true
	Times *int64 `json:"times"`
}

// Validate validates this rule trigger
func (m *RuleTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleTrigger) validateCalculation(formats strfmt.Registry) error {

	if err := validate.Required("calculation", "body", m.Calculation); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validateNoticeLevel(formats strfmt.Registry) error {

	if err := validate.Required("noticeLevel", "body", m.NoticeLevel); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *RuleTrigger) validateTimes(formats strfmt.Registry) error {

	if err := validate.Required("times", "body", m.Times); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rule trigger based on context it is used
func (m *RuleTrigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RuleTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleTrigger) UnmarshalBinary(b []byte) error {
	var res RuleTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

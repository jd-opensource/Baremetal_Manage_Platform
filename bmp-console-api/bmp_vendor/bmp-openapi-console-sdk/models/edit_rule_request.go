// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EditRuleRequest edit rule request
//
// swagger:model EditRuleRequest
type EditRuleRequest struct {

	// 盘符、挂载点、网口列表
	DeviceTag string `json:"deviceTag,omitempty"`

	// 维度 [instance、disk、mountpoint、nic]
	// Required: true
	Dimension *string `json:"dimension"`

	// 实例id列表
	// Required: true
	InstanceIds []string `json:"instanceIds"`

	// 资源类型,目前只支持instance
	// Required: true
	Resource *string `json:"resource"`

	// 规则id
	// Required: true
	RuleID *string `json:"ruleId"`

	// 规则名称
	// Required: true
	RuleName *string `json:"ruleName"`

	// 触发条件
	// Required: true
	TriggerOption []*RuleTrigger `json:"triggerOption"`

	// notice option
	// Required: true
	NoticeOption *RuleNotice `json:"noticeOption"`
}

// Validate validates this edit rule request
func (m *EditRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditRuleRequest) validateDimension(formats strfmt.Registry) error {

	if err := validate.Required("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

func (m *EditRuleRequest) validateInstanceIds(formats strfmt.Registry) error {

	if err := validate.Required("instanceIds", "body", m.InstanceIds); err != nil {
		return err
	}

	return nil
}

func (m *EditRuleRequest) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *EditRuleRequest) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("ruleId", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *EditRuleRequest) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("ruleName", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *EditRuleRequest) validateTriggerOption(formats strfmt.Registry) error {

	if err := validate.Required("triggerOption", "body", m.TriggerOption); err != nil {
		return err
	}

	for i := 0; i < len(m.TriggerOption); i++ {
		if swag.IsZero(m.TriggerOption[i]) { // not required
			continue
		}

		if m.TriggerOption[i] != nil {
			if err := m.TriggerOption[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EditRuleRequest) validateNoticeOption(formats strfmt.Registry) error {

	if err := validate.Required("noticeOption", "body", m.NoticeOption); err != nil {
		return err
	}

	if m.NoticeOption != nil {
		if err := m.NoticeOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noticeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noticeOption")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edit rule request based on the context it is used
func (m *EditRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTriggerOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoticeOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditRuleRequest) contextValidateTriggerOption(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerOption); i++ {

		if m.TriggerOption[i] != nil {
			if err := m.TriggerOption[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EditRuleRequest) contextValidateNoticeOption(ctx context.Context, formats strfmt.Registry) error {

	if m.NoticeOption != nil {
		if err := m.NoticeOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noticeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noticeOption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EditRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EditRuleRequest) UnmarshalBinary(b []byte) error {
	var res EditRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SharingProject SharingProject 共享项目
//
// swagger:model SharingProject
type SharingProject struct {

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// created time
	CreatedTime int64 `json:"created_time,omitempty"`

	// deleted time
	DeletedTime int64 `json:"deleted_time,omitempty"`

	// is default
	IsDefault int8 `json:"is_default,omitempty"`

	// is del
	IsDel int8 `json:"is_del,omitempty"`

	// owner user ID
	OwnerUserID string `json:"owner_user_id,omitempty"`

	// owner user name
	OwnerUserName string `json:"owner_user_name,omitempty"`

	// premission
	Premission string `json:"premission,omitempty"`

	// project ID
	ProjectID string `json:"project_id,omitempty"`

	// project name
	ProjectName string `json:"project_name,omitempty"`

	// shared instance i ds
	SharedInstanceIDs string `json:"shared_instance_ids,omitempty"`

	// shared user ID
	SharedUserID string `json:"shared_user_id,omitempty"`

	// shared user name
	SharedUserName string `json:"shared_user_name,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`

	// updated time
	UpdatedTime int64 `json:"updated_time,omitempty"`
}

// Validate validates this sharing project
func (m *SharingProject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sharing project based on context it is used
func (m *SharingProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SharingProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharingProject) UnmarshalBinary(b []byte) error {
	var res SharingProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

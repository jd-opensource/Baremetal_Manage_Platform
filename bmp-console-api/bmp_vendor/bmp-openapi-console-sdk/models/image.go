// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Image image
//
// swagger:model Image
type Image struct {

	// 架构:x86/x64/i386/
	Architecture string `json:"architecture,omitempty"`

	// 引导模式 【UEFI Legacy/BIOS】
	BootMode string `json:"bootMode,omitempty"`

	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// 数据分区信息
	DataPartition string `json:"dataPartition,omitempty"`

	// 描述
	Description string `json:"description,omitempty"`

	// 绑定了机型数量
	DeviceTypeNum int64 `json:"deviceTypeNum,omitempty"`

	// 镜像文件名称
	Filename string `json:"filename,omitempty"`

	// 镜像格式（qcow2、tar）
	Format string `json:"format,omitempty"`

	// 镜像校验码
	Hash string `json:"hash,omitempty"`

	// ID
	ID uint64 `json:"id,omitempty"`

	// 镜像uuid
	ImageID string `json:"imageId,omitempty"`

	// 镜像名称
	ImageName string `json:"imageName,omitempty"`

	// 是否绑定了某个机型
	IsBind bool `json:"isBind,omitempty"`

	// 源os uuid
	OsID string `json:"osId,omitempty"`

	// CentOS 7.2 64-bit
	OsName string `json:"osName,omitempty"`

	// 操作系统分类:linux/windows
	OsType string `json:"osType,omitempty"`

	// 操作系统版本
	OsVersion string `json:"osVersion,omitempty"`

	// 镜像来源(common通用、customize定制、user_defined自定义)
	Source string `json:"source,omitempty"`

	// 镜像来源(common通用、customize定制、user_defined自定义)
	SourceName string `json:"sourceName,omitempty"`

	// 系统分区信息（系统盘：“/ ” ：50GiB，xfs；swap：10GiB，swap）
	SystemPartition string `json:"systemPartition,omitempty"`

	// 镜像源路径
	URL string `json:"url,omitempty"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this image based on context it is used
func (m *Image) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

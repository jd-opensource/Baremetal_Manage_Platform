// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Project project
//
// swagger:model Project
type Project struct {

	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// 项目描述,新增
	Description string `json:"description,omitempty"`

	// 项目下实例数量
	InstanceCount int64 `json:"instanceCount,omitempty"`

	// 此项目的共享标志位，1为拥有，2为共享
	Owned int64 `json:"owned,omitempty"`

	// 拥有者
	OwnedBy string `json:"ownedBy,omitempty"`

	// 项目uuid
	ProjectID string `json:"projectId,omitempty"`

	// 项目名称
	ProjectName string `json:"projectName,omitempty"`

	// 共享
	ShareProjects []*ShareProject `json:"shareProjects"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShareProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateShareProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareProjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ShareProjects); i++ {
		if swag.IsZero(m.ShareProjects[i]) { // not required
			continue
		}

		if m.ShareProjects[i] != nil {
			if err := m.ShareProjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project based on the context it is used
func (m *Project) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShareProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) contextValidateShareProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShareProjects); i++ {

		if m.ShareProjects[i] != nil {
			if err := m.ShareProjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

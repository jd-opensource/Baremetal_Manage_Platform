// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddAlertItem add alert item
//
// swagger:model AddAlertItem
type AddAlertItem struct {

	// 告警持续时间
	// Required: true
	AlertPeriod *int64 `json:"alertPeriod"`

	// 告警时间戳
	// Required: true
	AlertTimestamp *int64 `json:"alertTimestamp"`

	// 告警值
	// Required: true
	AlertValue *string `json:"alertValue"`

	// 计算结果单位 [对于使用量，有Bytes,KB,MB,GB,TB，对于使用率，是%，对于连接个数，是count，对于网络包量，是pps,Kpps,Mpps,Gpps,Tpps，对于网络速率，是bps,Kbps,Mbps,Gbps,Tbps 对于负载，没有单位。。。。。。产品需详细列出]
	CalculationUnit string `json:"calculationUnit,omitempty"`

	// 实例id
	// Required: true
	InstanceID *string `json:"instanceId"`

	// 是否为恢复通知，0为不是，1为是
	IsRecover int64 `json:"isRecover,omitempty"`

	// 规则ID
	// Required: true
	RuleID *string `json:"ruleId"`

	// 规则名称
	RuleName string `json:"ruleName,omitempty"`

	// 触发条件
	// Required: true
	Trigger *string `json:"trigger"`
}

// Validate validates this add alert item
func (m *AddAlertItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddAlertItem) validateAlertPeriod(formats strfmt.Registry) error {

	if err := validate.Required("alertPeriod", "body", m.AlertPeriod); err != nil {
		return err
	}

	return nil
}

func (m *AddAlertItem) validateAlertTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("alertTimestamp", "body", m.AlertTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *AddAlertItem) validateAlertValue(formats strfmt.Registry) error {

	if err := validate.Required("alertValue", "body", m.AlertValue); err != nil {
		return err
	}

	return nil
}

func (m *AddAlertItem) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	return nil
}

func (m *AddAlertItem) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("ruleId", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *AddAlertItem) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add alert item based on context it is used
func (m *AddAlertItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddAlertItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddAlertItem) UnmarshalBinary(b []byte) error {
	var res AddAlertItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

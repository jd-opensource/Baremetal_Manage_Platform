// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DescribeDevice(params *DescribeDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceOK, error)

	DescribeDeviceStock(params *DescribeDeviceStockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceStockOK, error)

	DescribeDevices(params *DescribeDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDevicesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DescribeDevice DescribeDevice 获取设备详情
*/
func (a *Client) DescribeDevice(params *DescribeDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDevice",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceStock DescribeDeviceStock 获取指定机型的设备库存
*/
func (a *Client) DescribeDeviceStock(params *DescribeDeviceStockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceStockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceStockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceStock",
		Method:             "DELETE",
		PathPattern:        "/devices/stock",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceStockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceStockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceStockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDevices DescribeDevices 获取设备列表
*/
func (a *Client) DescribeDevices(params *DescribeDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDevices",
		Method:             "GET",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

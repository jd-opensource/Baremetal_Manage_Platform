// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"coding.jd.com/aidc-bmp/bmp-openapi-console-sdk/models"
)

// DeleteMessageReader is a Reader for the DeleteMessage structure.
type DeleteMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeleteMessageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteMessageOK creates a DeleteMessageOK with default headers values
func NewDeleteMessageOK() *DeleteMessageOK {
	return &DeleteMessageOK{}
}

/* DeleteMessageOK describes a response with status code 200, with default header values.

A DeleteMessageResult is an response struct
*/
type DeleteMessageOK struct {

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *DeleteMessageOKBody
}

// IsSuccess returns true when this delete message o k response has a 2xx status code
func (o *DeleteMessageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete message o k response has a 3xx status code
func (o *DeleteMessageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete message o k response has a 4xx status code
func (o *DeleteMessageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete message o k response has a 5xx status code
func (o *DeleteMessageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete message o k response a status code equal to that given
func (o *DeleteMessageOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteMessageOK) Error() string {
	return fmt.Sprintf("[DELETE /messages/delete][%d] deleteMessageOK  %+v", 200, o.Payload)
}

func (o *DeleteMessageOK) String() string {
	return fmt.Sprintf("[DELETE /messages/delete][%d] deleteMessageOK  %+v", 200, o.Payload)
}

func (o *DeleteMessageOK) GetPayload() *DeleteMessageOKBody {
	return o.Payload
}

func (o *DeleteMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(DeleteMessageOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMessageDefault creates a DeleteMessageDefault with default headers values
func NewDeleteMessageDefault(code int) *DeleteMessageDefault {
	return &DeleteMessageDefault{
		_statusCode: code,
	}
}

/* DeleteMessageDefault describes a response with status code -1, with default header values.

unit err response for non 200
*/
type DeleteMessageDefault struct {
	_statusCode int

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *DeleteMessageDefaultBody
}

// Code gets the status code for the delete message default response
func (o *DeleteMessageDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete message default response has a 2xx status code
func (o *DeleteMessageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete message default response has a 3xx status code
func (o *DeleteMessageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete message default response has a 4xx status code
func (o *DeleteMessageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete message default response has a 5xx status code
func (o *DeleteMessageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete message default response a status code equal to that given
func (o *DeleteMessageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteMessageDefault) Error() string {
	return fmt.Sprintf("[DELETE /messages/delete][%d] deleteMessage default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMessageDefault) String() string {
	return fmt.Sprintf("[DELETE /messages/delete][%d] deleteMessage default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMessageDefault) GetPayload() *DeleteMessageDefaultBody {
	return o.Payload
}

func (o *DeleteMessageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(DeleteMessageDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteMessageDefaultBody delete message default body
swagger:model DeleteMessageDefaultBody
*/
type DeleteMessageDefaultBody struct {

	// 流量ID
	// Required: true
	RequestID *string `json:"requestId"`

	// error
	// Required: true
	Error *models.ErrorResponse `json:"error"`
}

// Validate validates this delete message default body
func (o *DeleteMessageDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteMessageDefaultBody) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("deleteMessage default"+"."+"requestId", "body", o.RequestID); err != nil {
		return err
	}

	return nil
}

func (o *DeleteMessageDefaultBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteMessage default"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteMessage default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteMessage default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete message default body based on the context it is used
func (o *DeleteMessageDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteMessageDefaultBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteMessage default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteMessage default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMessageDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMessageDefaultBody) UnmarshalBinary(b []byte) error {
	var res DeleteMessageDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteMessageOKBody delete message o k body
swagger:model DeleteMessageOKBody
*/
type DeleteMessageOKBody struct {

	// result
	Result *models.CommonResponse `json:"result,omitempty"`
}

// Validate validates this delete message o k body
func (o *DeleteMessageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteMessageOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteMessageOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteMessageOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete message o k body based on the context it is used
func (o *DeleteMessageOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteMessageOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteMessageOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteMessageOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMessageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMessageOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteMessageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

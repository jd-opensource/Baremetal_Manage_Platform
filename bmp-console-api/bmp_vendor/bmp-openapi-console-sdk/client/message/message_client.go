// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new message API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for message API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteMessage(params *DeleteMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMessageOK, error)

	GetMessageByID(params *GetMessageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageByIDOK, error)

	GetMessageList(params *GetMessageListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageListOK, error)

	GetMessageStatistic(params *GetMessageStatisticParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageStatisticOK, error)

	GetMessageTypes(params *GetMessageTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageTypesOK, error)

	HasUnreadMessage(params *HasUnreadMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HasUnreadMessageOK, error)

	ReadMessage(params *ReadMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadMessageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteMessage DeleteMessage 删除消息(可多条)
*/
func (a *Client) DeleteMessage(params *DeleteMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMessage",
		Method:             "DELETE",
		PathPattern:        "/messages/delete",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMessageByID GetMessageById 获取消息详情，包括上一条/下一条的messageid
*/
func (a *Client) GetMessageByID(params *GetMessageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMessageById",
		Method:             "GET",
		PathPattern:        "/messages/getMessageById",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMessageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMessageByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMessageByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMessageList GetMessageList 获取message列表(分页)
*/
func (a *Client) GetMessageList(params *GetMessageListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMessageList",
		Method:             "GET",
		PathPattern:        "/messages",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMessageListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMessageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMessageListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMessageStatistic GetMessageStatistic 获取message总数和未读数
*/
func (a *Client) GetMessageStatistic(params *GetMessageStatisticParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageStatisticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageStatisticParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMessageStatistic",
		Method:             "GET",
		PathPattern:        "/messages/statistic",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMessageStatisticReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMessageStatisticOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMessageStatisticDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMessageTypes GetMessageTypes 获取消息类型/子类型
*/
func (a *Client) GetMessageTypes(params *GetMessageTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMessageTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMessageTypes",
		Method:             "GET",
		PathPattern:        "/messages/getMessageTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMessageTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMessageTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMessageTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HasUnreadMessage HasUnreadMessage 获取有没有未读消息
*/
func (a *Client) HasUnreadMessage(params *HasUnreadMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HasUnreadMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHasUnreadMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hasUnreadMessage",
		Method:             "GET",
		PathPattern:        "/messages/hasUnreadMessage",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HasUnreadMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HasUnreadMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HasUnreadMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReadMessage ReadMessage 将消息设置为已读(可多条)
*/
func (a *Client) ReadMessage(params *ReadMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "readMessage",
		Method:             "PUT",
		PathPattern:        "/messages/doRead",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

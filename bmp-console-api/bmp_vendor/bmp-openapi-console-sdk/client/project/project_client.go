// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelShareUserProject(params *CancelShareUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelShareUserProjectOK, error)

	CreateUserProject(params *CreateUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserProjectOK, error)

	DeleteUserProject(params *DeleteUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserProjectOK, error)

	DescribeShareProject(params *DescribeShareProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeShareProjectOK, error)

	DescribeUserProject(params *DescribeUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserProjectOK, error)

	DescribeUserProjects(params *DescribeUserProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserProjectsOK, error)

	ModifyUserProject(params *ModifyUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserProjectOK, error)

	ModifyUserProjectDescription(params *ModifyUserProjectDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserProjectDescriptionOK, error)

	MoveUserInstances(params *MoveUserInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveUserInstancesOK, error)

	MoveUserProject(params *MoveUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveUserProjectOK, error)

	ShareUserProject(params *ShareUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareUserProjectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelShareUserProject CancelShareUserProject 取消共享项目
*/
func (a *Client) CancelShareUserProject(params *CancelShareUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelShareUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelShareUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelShareUserProject",
		Method:             "PUT",
		PathPattern:        "/user/projects/{project_id}/cancelShare",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelShareUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelShareUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelShareUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateUserProject CreateUserProject 创建项目
*/
func (a *Client) CreateUserProject(params *CreateUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserProject",
		Method:             "POST",
		PathPattern:        "/user/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUserProject DeleteUserProject 删除项目
*/
func (a *Client) DeleteUserProject(params *DeleteUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserProject",
		Method:             "DELETE",
		PathPattern:        "/user/projects/{project_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeShareProject DescribeShareUserProject 获取共享项目详情
*/
func (a *Client) DescribeShareProject(params *DescribeShareProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeShareProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeShareProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeShareProject",
		Method:             "GET",
		PathPattern:        "/user/projects/{project_id}/describeSharProject",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeShareProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeShareProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeShareProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserProject DescribeUserProject 获取项目详情
*/
func (a *Client) DescribeUserProject(params *DescribeUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserProject",
		Method:             "GET",
		PathPattern:        "/user/projects/{project_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserProjects DescribeUserProjects 获取项目列表
*/
func (a *Client) DescribeUserProjects(params *DescribeUserProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserProjects",
		Method:             "GET",
		PathPattern:        "/user/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyUserProject ModifyUserProject 修改项目信息
*/
func (a *Client) ModifyUserProject(params *ModifyUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyUserProject",
		Method:             "PUT",
		PathPattern:        "/user/projects/{project_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyUserProjectDescription ModifyUserProject 修改项目信息
*/
func (a *Client) ModifyUserProjectDescription(params *ModifyUserProjectDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserProjectDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserProjectDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyUserProjectDescription",
		Method:             "PUT",
		PathPattern:        "/user/projects/{project_id}/description",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyUserProjectDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyUserProjectDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyUserProjectDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MoveUserInstances MoveUserInstances 转移项目下的某些实例
*/
func (a *Client) MoveUserInstances(params *MoveUserInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveUserInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveUserInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveUserInstances",
		Method:             "PUT",
		PathPattern:        "/user/projects/move/instances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveUserInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveUserInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MoveUserInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MoveUserProject MoveUserProject 转移项目
*/
func (a *Client) MoveUserProject(params *MoveUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveUserProject",
		Method:             "PUT",
		PathPattern:        "/user/projects/{project_id}/move",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MoveUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ShareUserProject ShareUserProject 共享项目
*/
func (a *Client) ShareUserProject(params *ShareUserProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareUserProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShareUserProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shareUserProject",
		Method:             "PUT",
		PathPattern:        "/user/projects/{project_id}/share",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShareUserProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShareUserProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShareUserProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

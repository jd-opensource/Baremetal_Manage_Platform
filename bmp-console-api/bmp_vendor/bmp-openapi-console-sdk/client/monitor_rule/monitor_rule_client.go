// Code generated by go-swagger; DO NOT EDIT.

package monitor_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitor rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitor rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRule(params *AddRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRuleOK, error)

	DeleteRule(params *DeleteRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRuleOK, error)

	DescribeRule(params *DescribeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRuleOK, error)

	DescribeRules(params *DescribeRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRulesOK, error)

	DisableRule(params *DisableRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableRuleOK, error)

	EditRule(params *EditRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditRuleOK, error)

	EnableRule(params *EnableRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddRule AddRule 添加规则
*/
func (a *Client) AddRule(params *AddRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRule",
		Method:             "POST",
		PathPattern:        "/monitorRule/addRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteRule DeleteRule 删除规则
*/
func (a *Client) DeleteRule(params *DeleteRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRule",
		Method:             "DELETE",
		PathPattern:        "/monitorRule/deleteRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeRule DescribeRule 规则详情
*/
func (a *Client) DescribeRule(params *DescribeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeRule",
		Method:             "GET",
		PathPattern:        "/monitorRule/describeRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeRules DescribeRules 规则列表
*/
func (a *Client) DescribeRules(params *DescribeRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeRules",
		Method:             "GET",
		PathPattern:        "/monitorRule/describeRules",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DisableRule DisableRule 禁用规则
*/
func (a *Client) DisableRule(params *DisableRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableRule",
		Method:             "PUT",
		PathPattern:        "/monitorRule/disableRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EditRule EditRule 编辑规则
*/
func (a *Client) EditRule(params *EditRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editRule",
		Method:             "PUT",
		PathPattern:        "/monitorRule/editRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EnableRule EnableRule 启用规则
*/
func (a *Client) EnableRule(params *EnableRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableRule",
		Method:             "PUT",
		PathPattern:        "/monitorRule/enableRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

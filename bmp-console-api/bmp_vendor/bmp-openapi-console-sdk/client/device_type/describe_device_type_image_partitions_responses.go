// Code generated by go-swagger; DO NOT EDIT.

package device_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"coding.jd.com/aidc-bmp/bmp-openapi-console-sdk/models"
)

// DescribeDeviceTypeImagePartitionsReader is a Reader for the DescribeDeviceTypeImagePartitions structure.
type DescribeDeviceTypeImagePartitionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DescribeDeviceTypeImagePartitionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDescribeDeviceTypeImagePartitionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDescribeDeviceTypeImagePartitionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDescribeDeviceTypeImagePartitionsOK creates a DescribeDeviceTypeImagePartitionsOK with default headers values
func NewDescribeDeviceTypeImagePartitionsOK() *DescribeDeviceTypeImagePartitionsOK {
	return &DescribeDeviceTypeImagePartitionsOK{}
}

/* DescribeDeviceTypeImagePartitionsOK describes a response with status code 200, with default header values.

DescribeDeviceTypeImagePartitionsOK describe device type image partitions o k
*/
type DescribeDeviceTypeImagePartitionsOK struct {

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *DescribeDeviceTypeImagePartitionsOKBody
}

// IsSuccess returns true when this describe device type image partitions o k response has a 2xx status code
func (o *DescribeDeviceTypeImagePartitionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this describe device type image partitions o k response has a 3xx status code
func (o *DescribeDeviceTypeImagePartitionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe device type image partitions o k response has a 4xx status code
func (o *DescribeDeviceTypeImagePartitionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe device type image partitions o k response has a 5xx status code
func (o *DescribeDeviceTypeImagePartitionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this describe device type image partitions o k response a status code equal to that given
func (o *DescribeDeviceTypeImagePartitionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *DescribeDeviceTypeImagePartitionsOK) Error() string {
	return fmt.Sprintf("[GET /deviceTypes/deviceTypeImagePartition][%d] describeDeviceTypeImagePartitionsOK  %+v", 200, o.Payload)
}

func (o *DescribeDeviceTypeImagePartitionsOK) String() string {
	return fmt.Sprintf("[GET /deviceTypes/deviceTypeImagePartition][%d] describeDeviceTypeImagePartitionsOK  %+v", 200, o.Payload)
}

func (o *DescribeDeviceTypeImagePartitionsOK) GetPayload() *DescribeDeviceTypeImagePartitionsOKBody {
	return o.Payload
}

func (o *DescribeDeviceTypeImagePartitionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(DescribeDeviceTypeImagePartitionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeDeviceTypeImagePartitionsDefault creates a DescribeDeviceTypeImagePartitionsDefault with default headers values
func NewDescribeDeviceTypeImagePartitionsDefault(code int) *DescribeDeviceTypeImagePartitionsDefault {
	return &DescribeDeviceTypeImagePartitionsDefault{
		_statusCode: code,
	}
}

/* DescribeDeviceTypeImagePartitionsDefault describes a response with status code -1, with default header values.

unit err response for non 200
*/
type DescribeDeviceTypeImagePartitionsDefault struct {
	_statusCode int

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *DescribeDeviceTypeImagePartitionsDefaultBody
}

// Code gets the status code for the describe device type image partitions default response
func (o *DescribeDeviceTypeImagePartitionsDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this describe device type image partitions default response has a 2xx status code
func (o *DescribeDeviceTypeImagePartitionsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this describe device type image partitions default response has a 3xx status code
func (o *DescribeDeviceTypeImagePartitionsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this describe device type image partitions default response has a 4xx status code
func (o *DescribeDeviceTypeImagePartitionsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this describe device type image partitions default response has a 5xx status code
func (o *DescribeDeviceTypeImagePartitionsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this describe device type image partitions default response a status code equal to that given
func (o *DescribeDeviceTypeImagePartitionsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DescribeDeviceTypeImagePartitionsDefault) Error() string {
	return fmt.Sprintf("[GET /deviceTypes/deviceTypeImagePartition][%d] describeDeviceTypeImagePartitions default  %+v", o._statusCode, o.Payload)
}

func (o *DescribeDeviceTypeImagePartitionsDefault) String() string {
	return fmt.Sprintf("[GET /deviceTypes/deviceTypeImagePartition][%d] describeDeviceTypeImagePartitions default  %+v", o._statusCode, o.Payload)
}

func (o *DescribeDeviceTypeImagePartitionsDefault) GetPayload() *DescribeDeviceTypeImagePartitionsDefaultBody {
	return o.Payload
}

func (o *DescribeDeviceTypeImagePartitionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(DescribeDeviceTypeImagePartitionsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DescribeDeviceTypeImagePartitionsDefaultBody describe device type image partitions default body
swagger:model DescribeDeviceTypeImagePartitionsDefaultBody
*/
type DescribeDeviceTypeImagePartitionsDefaultBody struct {

	// 流量ID
	// Required: true
	RequestID *string `json:"requestId"`

	// error
	// Required: true
	Error *models.ErrorResponse `json:"error"`
}

// Validate validates this describe device type image partitions default body
func (o *DescribeDeviceTypeImagePartitionsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DescribeDeviceTypeImagePartitionsDefaultBody) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("describeDeviceTypeImagePartitions default"+"."+"requestId", "body", o.RequestID); err != nil {
		return err
	}

	return nil
}

func (o *DescribeDeviceTypeImagePartitionsDefaultBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("describeDeviceTypeImagePartitions default"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("describeDeviceTypeImagePartitions default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("describeDeviceTypeImagePartitions default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this describe device type image partitions default body based on the context it is used
func (o *DescribeDeviceTypeImagePartitionsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DescribeDeviceTypeImagePartitionsDefaultBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("describeDeviceTypeImagePartitions default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("describeDeviceTypeImagePartitions default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DescribeDeviceTypeImagePartitionsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DescribeDeviceTypeImagePartitionsDefaultBody) UnmarshalBinary(b []byte) error {
	var res DescribeDeviceTypeImagePartitionsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DescribeDeviceTypeImagePartitionsOKBody describe device type image partitions o k body
swagger:model DescribeDeviceTypeImagePartitionsOKBody
*/
type DescribeDeviceTypeImagePartitionsOKBody struct {

	// result
	Result *models.QueryDeviceTypeImagePartitionResponse `json:"result,omitempty"`
}

// Validate validates this describe device type image partitions o k body
func (o *DescribeDeviceTypeImagePartitionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DescribeDeviceTypeImagePartitionsOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("describeDeviceTypeImagePartitionsOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("describeDeviceTypeImagePartitionsOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this describe device type image partitions o k body based on the context it is used
func (o *DescribeDeviceTypeImagePartitionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DescribeDeviceTypeImagePartitionsOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("describeDeviceTypeImagePartitionsOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("describeDeviceTypeImagePartitionsOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DescribeDeviceTypeImagePartitionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DescribeDeviceTypeImagePartitionsOKBody) UnmarshalBinary(b []byte) error {
	var res DescribeDeviceTypeImagePartitionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

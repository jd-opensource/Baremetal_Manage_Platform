// Code generated by go-swagger; DO NOT EDIT.

package device_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DescribeDeviceType(params *DescribeDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeOK, error)

	DescribeDeviceTypeImagePartitions(params *DescribeDeviceTypeImagePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeImagePartitionsOK, error)

	DescribeDeviceTypeImages(params *DescribeDeviceTypeImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeImagesOK, error)

	DescribeDeviceTypes(params *DescribeDeviceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypesOK, error)

	DescribeVolumesRaids(params *DescribeVolumesRaidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeVolumesRaidsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DescribeDeviceType DescribeDeviceType 获取机型详情
*/
func (a *Client) DescribeDeviceType(params *DescribeDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceType",
		Method:             "GET",
		PathPattern:        "/deviceTypes/{device_type_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceTypeImagePartitions QueryDeviceTypeImagePartition 根据机型，镜像，获取分区
*/
func (a *Client) DescribeDeviceTypeImagePartitions(params *DescribeDeviceTypeImagePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeImagePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceTypeImagePartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceTypeImagePartitions",
		Method:             "GET",
		PathPattern:        "/deviceTypes/deviceTypeImagePartition",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceTypeImagePartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceTypeImagePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceTypeImagePartitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceTypeImages QueryDeviceTypeImage 根据机型获取镜像
*/
func (a *Client) DescribeDeviceTypeImages(params *DescribeDeviceTypeImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypeImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceTypeImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceTypeImages",
		Method:             "GET",
		PathPattern:        "/deviceTypes/deviceTypeImage",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceTypeImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceTypeImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceTypeImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceTypes DescribeDeviceTypes 获取机型列表
*/
func (a *Client) DescribeDeviceTypes(params *DescribeDeviceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceTypes",
		Method:             "GET",
		PathPattern:        "/deviceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeVolumesRaids DescribeVolumesRaids 根据机型获取卷和raid信息 (deviceTypeRaid->volumesRaids)
*/
func (a *Client) DescribeVolumesRaids(params *DescribeVolumesRaidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeVolumesRaidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeVolumesRaidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeVolumesRaids",
		Method:             "GET",
		PathPattern:        "/deviceTypes/volumesRaids",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeVolumesRaidsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeVolumesRaidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeVolumesRaidsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package monitor_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDescribeAlertsParams creates a new DescribeAlertsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeAlertsParams() *DescribeAlertsParams {
	return &DescribeAlertsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeAlertsParamsWithTimeout creates a new DescribeAlertsParams object
// with the ability to set a timeout on a request.
func NewDescribeAlertsParamsWithTimeout(timeout time.Duration) *DescribeAlertsParams {
	return &DescribeAlertsParams{
		timeout: timeout,
	}
}

// NewDescribeAlertsParamsWithContext creates a new DescribeAlertsParams object
// with the ability to set a context for a request.
func NewDescribeAlertsParamsWithContext(ctx context.Context) *DescribeAlertsParams {
	return &DescribeAlertsParams{
		Context: ctx,
	}
}

// NewDescribeAlertsParamsWithHTTPClient creates a new DescribeAlertsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeAlertsParamsWithHTTPClient(client *http.Client) *DescribeAlertsParams {
	return &DescribeAlertsParams{
		HTTPClient: client,
	}
}

/* DescribeAlertsParams contains all the parameters to send to the API endpoint
   for the describe alerts operation.

   Typically these are written to a http.Request.
*/
type DescribeAlertsParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* EndTime.

	   报警时间筛选etime

	   Format: int64
	*/
	EndTime *int64

	/* IsAll.

	   是否显示全部，取值为1时表示全部
	*/
	IsAll *string

	/* PageNumber.

	   页码

	   Format: int64
	*/
	PageNumber *int64

	/* PageSize.

	   每页数量

	   Format: int64
	*/
	PageSize *int64

	/* ProjectID.

	   project uuid
	*/
	ProjectID *string

	/* ResourceID.

	   资源id,目前就是实例id
	*/
	ResourceID *string

	/* RuleID.

	   规则uuid
	*/
	RuleID *string

	/* RuleName.

	   规则名称
	*/
	RuleName *string

	/* StartTime.

	   报警时间筛选stime

	   Format: int64
	*/
	StartTime *int64

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	/* UserID.

	   user uuid
	*/
	UserID *string

	/* UserName.

	   username
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe alerts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAlertsParams) WithDefaults() *DescribeAlertsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe alerts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAlertsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe alerts params
func (o *DescribeAlertsParams) WithTimeout(timeout time.Duration) *DescribeAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe alerts params
func (o *DescribeAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe alerts params
func (o *DescribeAlertsParams) WithContext(ctx context.Context) *DescribeAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe alerts params
func (o *DescribeAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe alerts params
func (o *DescribeAlertsParams) WithHTTPClient(client *http.Client) *DescribeAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe alerts params
func (o *DescribeAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the describe alerts params
func (o *DescribeAlertsParams) WithAuthorization(authorization string) *DescribeAlertsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe alerts params
func (o *DescribeAlertsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe alerts params
func (o *DescribeAlertsParams) WithBmpLanguage(bmpLanguage *string) *DescribeAlertsParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe alerts params
func (o *DescribeAlertsParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe alerts params
func (o *DescribeAlertsParams) WithBmpUserID(bmpUserID *string) *DescribeAlertsParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe alerts params
func (o *DescribeAlertsParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithEndTime adds the endTime to the describe alerts params
func (o *DescribeAlertsParams) WithEndTime(endTime *int64) *DescribeAlertsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the describe alerts params
func (o *DescribeAlertsParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithIsAll adds the isAll to the describe alerts params
func (o *DescribeAlertsParams) WithIsAll(isAll *string) *DescribeAlertsParams {
	o.SetIsAll(isAll)
	return o
}

// SetIsAll adds the isAll to the describe alerts params
func (o *DescribeAlertsParams) SetIsAll(isAll *string) {
	o.IsAll = isAll
}

// WithPageNumber adds the pageNumber to the describe alerts params
func (o *DescribeAlertsParams) WithPageNumber(pageNumber *int64) *DescribeAlertsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the describe alerts params
func (o *DescribeAlertsParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the describe alerts params
func (o *DescribeAlertsParams) WithPageSize(pageSize *int64) *DescribeAlertsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the describe alerts params
func (o *DescribeAlertsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProjectID adds the projectID to the describe alerts params
func (o *DescribeAlertsParams) WithProjectID(projectID *string) *DescribeAlertsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the describe alerts params
func (o *DescribeAlertsParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithResourceID adds the resourceID to the describe alerts params
func (o *DescribeAlertsParams) WithResourceID(resourceID *string) *DescribeAlertsParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the describe alerts params
func (o *DescribeAlertsParams) SetResourceID(resourceID *string) {
	o.ResourceID = resourceID
}

// WithRuleID adds the ruleID to the describe alerts params
func (o *DescribeAlertsParams) WithRuleID(ruleID *string) *DescribeAlertsParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the describe alerts params
func (o *DescribeAlertsParams) SetRuleID(ruleID *string) {
	o.RuleID = ruleID
}

// WithRuleName adds the ruleName to the describe alerts params
func (o *DescribeAlertsParams) WithRuleName(ruleName *string) *DescribeAlertsParams {
	o.SetRuleName(ruleName)
	return o
}

// SetRuleName adds the ruleName to the describe alerts params
func (o *DescribeAlertsParams) SetRuleName(ruleName *string) {
	o.RuleName = ruleName
}

// WithStartTime adds the startTime to the describe alerts params
func (o *DescribeAlertsParams) WithStartTime(startTime *int64) *DescribeAlertsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the describe alerts params
func (o *DescribeAlertsParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WithTraceID adds the traceID to the describe alerts params
func (o *DescribeAlertsParams) WithTraceID(traceID string) *DescribeAlertsParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe alerts params
func (o *DescribeAlertsParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WithUserID adds the userID to the describe alerts params
func (o *DescribeAlertsParams) WithUserID(userID *string) *DescribeAlertsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the describe alerts params
func (o *DescribeAlertsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the describe alerts params
func (o *DescribeAlertsParams) WithUserName(userName *string) *DescribeAlertsParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the describe alerts params
func (o *DescribeAlertsParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.IsAll != nil {

		// query param isAll
		var qrIsAll string

		if o.IsAll != nil {
			qrIsAll = *o.IsAll
		}
		qIsAll := qrIsAll
		if qIsAll != "" {

			if err := r.SetQueryParam("isAll", qIsAll); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.ResourceID != nil {

		// query param resourceId
		var qrResourceID string

		if o.ResourceID != nil {
			qrResourceID = *o.ResourceID
		}
		qResourceID := qrResourceID
		if qResourceID != "" {

			if err := r.SetQueryParam("resourceId", qResourceID); err != nil {
				return err
			}
		}
	}

	if o.RuleID != nil {

		// query param ruleId
		var qrRuleID string

		if o.RuleID != nil {
			qrRuleID = *o.RuleID
		}
		qRuleID := qrRuleID
		if qRuleID != "" {

			if err := r.SetQueryParam("ruleId", qRuleID); err != nil {
				return err
			}
		}
	}

	if o.RuleName != nil {

		// query param ruleName
		var qrRuleName string

		if o.RuleName != nil {
			qrRuleName = *o.RuleName
		}
		qRuleName := qrRuleName
		if qRuleName != "" {

			if err := r.SetQueryParam("ruleName", qRuleName); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if o.UserID != nil {

		// query param userId
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param userName
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

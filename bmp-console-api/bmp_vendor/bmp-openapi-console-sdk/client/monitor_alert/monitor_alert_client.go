// Code generated by go-swagger; DO NOT EDIT.

package monitor_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitor alert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitor alert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAlert(params *AddAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAlertOK, error)

	DeleteAlert(params *DeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertOK, error)

	DescribeAlert(params *DescribeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeAlertOK, error)

	DescribeAlerts(params *DescribeAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeAlertsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAlert AddAlert 添加(接收)告警
*/
func (a *Client) AddAlert(params *AddAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAlert",
		Method:             "POST",
		PathPattern:        "/monitorAlert/addAlert",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteAlert DeleteAlert 删除告警
*/
func (a *Client) DeleteAlert(params *DeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAlert",
		Method:             "DELETE",
		PathPattern:        "/monitorAlert/deleteAlert",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeAlert DescribeAlert 告警详情
*/
func (a *Client) DescribeAlert(params *DescribeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeAlert",
		Method:             "GET",
		PathPattern:        "/monitorAlert/describeAlert",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeAlerts DescribeAlerts 告警列表
*/
func (a *Client) DescribeAlerts(params *DescribeAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeAlerts",
		Method:             "GET",
		PathPattern:        "/monitorAlert/describeAlerts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeAlertsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

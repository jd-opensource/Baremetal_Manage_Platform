// Code generated by go-swagger; DO NOT EDIT.

package sshkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sshkey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sshkey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserSshkey(params *CreateUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserSshkeyOK, error)

	DeleteUserSshkey(params *DeleteUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserSshkeyOK, error)

	DescribeUserSSHKey(params *DescribeUserSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserSSHKeyOK, error)

	DescribeUserSSHKeys(params *DescribeUserSSHKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserSSHKeysOK, error)

	GetInstancesBySshkey(params *GetInstancesBySshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstancesBySshkeyOK, error)

	ModifyUserSshkey(params *ModifyUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserSshkeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserSshkey CreateUserSshkey 创建个人sshkey
*/
func (a *Client) CreateUserSshkey(params *CreateUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserSshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserSshkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserSshkey",
		Method:             "POST",
		PathPattern:        "/user/sshkeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserSshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserSshkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserSshkeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUserSshkey DeleteUserSshkey 删除sshkey
*/
func (a *Client) DeleteUserSshkey(params *DeleteUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserSshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSshkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserSshkey",
		Method:             "DELETE",
		PathPattern:        "/user/sshkeys/{sshkey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserSshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserSshkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserSshkeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserSSHKey DescribeUserSshKey 获取sshkey详情
*/
func (a *Client) DescribeUserSSHKey(params *DescribeUserSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserSSHKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserSshKey",
		Method:             "GET",
		PathPattern:        "/user/sshkeys/{sshkey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserSSHKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserSSHKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserSSHKeys DescribeUserSshKeys 获取个人sshkey列表
*/
func (a *Client) DescribeUserSSHKeys(params *DescribeUserSSHKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserSSHKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserSshKeys",
		Method:             "GET",
		PathPattern:        "/user/sshkeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserSSHKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserSSHKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserSSHKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetInstancesBySshkey GetInstancesBySshkey 根据sshkey获取实例列表
*/
func (a *Client) GetInstancesBySshkey(params *GetInstancesBySshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstancesBySshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesBySshkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstancesBySshkey",
		Method:             "GET",
		PathPattern:        "/user/sshkeys/instances/{sshkey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesBySshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstancesBySshkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInstancesBySshkeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyUserSshkey ModifyUserSshkey 修改sshkey
*/
func (a *Client) ModifyUserSshkey(params *ModifyUserSshkeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserSshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserSshkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyUserSshkey",
		Method:             "PUT",
		PathPattern:        "/user/sshkeys/{sshkey_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyUserSshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyUserSshkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyUserSshkeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

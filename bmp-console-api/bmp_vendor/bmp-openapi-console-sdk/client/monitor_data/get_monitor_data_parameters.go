// Code generated by go-swagger; DO NOT EDIT.

package monitor_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMonitorDataParams creates a new GetMonitorDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMonitorDataParams() *GetMonitorDataParams {
	return &GetMonitorDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMonitorDataParamsWithTimeout creates a new GetMonitorDataParams object
// with the ability to set a timeout on a request.
func NewGetMonitorDataParamsWithTimeout(timeout time.Duration) *GetMonitorDataParams {
	return &GetMonitorDataParams{
		timeout: timeout,
	}
}

// NewGetMonitorDataParamsWithContext creates a new GetMonitorDataParams object
// with the ability to set a context for a request.
func NewGetMonitorDataParamsWithContext(ctx context.Context) *GetMonitorDataParams {
	return &GetMonitorDataParams{
		Context: ctx,
	}
}

// NewGetMonitorDataParamsWithHTTPClient creates a new GetMonitorDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMonitorDataParamsWithHTTPClient(client *http.Client) *GetMonitorDataParams {
	return &GetMonitorDataParams{
		HTTPClient: client,
	}
}

/* GetMonitorDataParams contains all the parameters to send to the API endpoint
   for the get monitor data operation.

   Typically these are written to a http.Request.
*/
type GetMonitorDataParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* Device.

	   标签值
	*/
	Device *string

	/* DownSampleType.

	   avg, min, max, sum
	*/
	DownSampleType *string

	/* EndTime.

	   结束时间戳

	   Format: int64
	*/
	EndTime *int64

	/* InstanceID.

	   实例id
	*/
	InstanceID *string

	/* LastManyTime.

	   最近多少时间，小时为单位

	   Format: int64
	*/
	LastManyTime *int64

	/* MetricName.

	   指标名称，支持多个，用逗号隔离开
	*/
	MetricName *string

	/* StartTime.

	   开始时间戳

	   Format: int64
	*/
	StartTime *int64

	/* TimeInterval.

	   间隔多久一个点 s为单位

	   Format: int64
	*/
	TimeInterval *int64

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get monitor data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMonitorDataParams) WithDefaults() *GetMonitorDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get monitor data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMonitorDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get monitor data params
func (o *GetMonitorDataParams) WithTimeout(timeout time.Duration) *GetMonitorDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get monitor data params
func (o *GetMonitorDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get monitor data params
func (o *GetMonitorDataParams) WithContext(ctx context.Context) *GetMonitorDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get monitor data params
func (o *GetMonitorDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get monitor data params
func (o *GetMonitorDataParams) WithHTTPClient(client *http.Client) *GetMonitorDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get monitor data params
func (o *GetMonitorDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get monitor data params
func (o *GetMonitorDataParams) WithAuthorization(authorization string) *GetMonitorDataParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get monitor data params
func (o *GetMonitorDataParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the get monitor data params
func (o *GetMonitorDataParams) WithBmpLanguage(bmpLanguage *string) *GetMonitorDataParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the get monitor data params
func (o *GetMonitorDataParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the get monitor data params
func (o *GetMonitorDataParams) WithBmpUserID(bmpUserID *string) *GetMonitorDataParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the get monitor data params
func (o *GetMonitorDataParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithDevice adds the device to the get monitor data params
func (o *GetMonitorDataParams) WithDevice(device *string) *GetMonitorDataParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get monitor data params
func (o *GetMonitorDataParams) SetDevice(device *string) {
	o.Device = device
}

// WithDownSampleType adds the downSampleType to the get monitor data params
func (o *GetMonitorDataParams) WithDownSampleType(downSampleType *string) *GetMonitorDataParams {
	o.SetDownSampleType(downSampleType)
	return o
}

// SetDownSampleType adds the downSampleType to the get monitor data params
func (o *GetMonitorDataParams) SetDownSampleType(downSampleType *string) {
	o.DownSampleType = downSampleType
}

// WithEndTime adds the endTime to the get monitor data params
func (o *GetMonitorDataParams) WithEndTime(endTime *int64) *GetMonitorDataParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get monitor data params
func (o *GetMonitorDataParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithInstanceID adds the instanceID to the get monitor data params
func (o *GetMonitorDataParams) WithInstanceID(instanceID *string) *GetMonitorDataParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the get monitor data params
func (o *GetMonitorDataParams) SetInstanceID(instanceID *string) {
	o.InstanceID = instanceID
}

// WithLastManyTime adds the lastManyTime to the get monitor data params
func (o *GetMonitorDataParams) WithLastManyTime(lastManyTime *int64) *GetMonitorDataParams {
	o.SetLastManyTime(lastManyTime)
	return o
}

// SetLastManyTime adds the lastManyTime to the get monitor data params
func (o *GetMonitorDataParams) SetLastManyTime(lastManyTime *int64) {
	o.LastManyTime = lastManyTime
}

// WithMetricName adds the metricName to the get monitor data params
func (o *GetMonitorDataParams) WithMetricName(metricName *string) *GetMonitorDataParams {
	o.SetMetricName(metricName)
	return o
}

// SetMetricName adds the metricName to the get monitor data params
func (o *GetMonitorDataParams) SetMetricName(metricName *string) {
	o.MetricName = metricName
}

// WithStartTime adds the startTime to the get monitor data params
func (o *GetMonitorDataParams) WithStartTime(startTime *int64) *GetMonitorDataParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get monitor data params
func (o *GetMonitorDataParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WithTimeInterval adds the timeInterval to the get monitor data params
func (o *GetMonitorDataParams) WithTimeInterval(timeInterval *int64) *GetMonitorDataParams {
	o.SetTimeInterval(timeInterval)
	return o
}

// SetTimeInterval adds the timeInterval to the get monitor data params
func (o *GetMonitorDataParams) SetTimeInterval(timeInterval *int64) {
	o.TimeInterval = timeInterval
}

// WithTraceID adds the traceID to the get monitor data params
func (o *GetMonitorDataParams) WithTraceID(traceID string) *GetMonitorDataParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the get monitor data params
func (o *GetMonitorDataParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetMonitorDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.Device != nil {

		// query param device
		var qrDevice string

		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {

			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}
	}

	if o.DownSampleType != nil {

		// query param downSampleType
		var qrDownSampleType string

		if o.DownSampleType != nil {
			qrDownSampleType = *o.DownSampleType
		}
		qDownSampleType := qrDownSampleType
		if qDownSampleType != "" {

			if err := r.SetQueryParam("downSampleType", qDownSampleType); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.InstanceID != nil {

		// query param instanceId
		var qrInstanceID string

		if o.InstanceID != nil {
			qrInstanceID = *o.InstanceID
		}
		qInstanceID := qrInstanceID
		if qInstanceID != "" {

			if err := r.SetQueryParam("instanceId", qInstanceID); err != nil {
				return err
			}
		}
	}

	if o.LastManyTime != nil {

		// query param lastManyTime
		var qrLastManyTime int64

		if o.LastManyTime != nil {
			qrLastManyTime = *o.LastManyTime
		}
		qLastManyTime := swag.FormatInt64(qrLastManyTime)
		if qLastManyTime != "" {

			if err := r.SetQueryParam("lastManyTime", qLastManyTime); err != nil {
				return err
			}
		}
	}

	if o.MetricName != nil {

		// query param metricName
		var qrMetricName string

		if o.MetricName != nil {
			qrMetricName = *o.MetricName
		}
		qMetricName := qrMetricName
		if qMetricName != "" {

			if err := r.SetQueryParam("metricName", qMetricName); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.TimeInterval != nil {

		// query param timeInterval
		var qrTimeInterval int64

		if o.TimeInterval != nil {
			qrTimeInterval = *o.TimeInterval
		}
		qTimeInterval := swag.FormatInt64(qrTimeInterval)
		if qTimeInterval != "" {

			if err := r.SetQueryParam("timeInterval", qTimeInterval); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

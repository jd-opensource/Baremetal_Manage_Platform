// Code generated by go-swagger; DO NOT EDIT.

package device_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"coding.jd.com/aidc-bmp/bmp-openapi-sdk/models"
)

// CreateDeviceTypeReader is a Reader for the CreateDeviceType structure.
type CreateDeviceTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDeviceTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDeviceTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateDeviceTypeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDeviceTypeOK creates a CreateDeviceTypeOK with default headers values
func NewCreateDeviceTypeOK() *CreateDeviceTypeOK {
	return &CreateDeviceTypeOK{}
}

/* CreateDeviceTypeOK describes a response with status code 200, with default header values.

A CreateDeviceTypeResult is an response struct that is used to describe create deviceType result.
*/
type CreateDeviceTypeOK struct {

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *CreateDeviceTypeOKBody
}

// IsSuccess returns true when this create device type o k response has a 2xx status code
func (o *CreateDeviceTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create device type o k response has a 3xx status code
func (o *CreateDeviceTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device type o k response has a 4xx status code
func (o *CreateDeviceTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create device type o k response has a 5xx status code
func (o *CreateDeviceTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create device type o k response a status code equal to that given
func (o *CreateDeviceTypeOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateDeviceTypeOK) Error() string {
	return fmt.Sprintf("[POST /deviceTypes][%d] createDeviceTypeOK  %+v", 200, o.Payload)
}

func (o *CreateDeviceTypeOK) String() string {
	return fmt.Sprintf("[POST /deviceTypes][%d] createDeviceTypeOK  %+v", 200, o.Payload)
}

func (o *CreateDeviceTypeOK) GetPayload() *CreateDeviceTypeOKBody {
	return o.Payload
}

func (o *CreateDeviceTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(CreateDeviceTypeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceTypeDefault creates a CreateDeviceTypeDefault with default headers values
func NewCreateDeviceTypeDefault(code int) *CreateDeviceTypeDefault {
	return &CreateDeviceTypeDefault{
		_statusCode: code,
	}
}

/* CreateDeviceTypeDefault describes a response with status code -1, with default header values.

unit err response for non 200
*/
type CreateDeviceTypeDefault struct {
	_statusCode int

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *CreateDeviceTypeDefaultBody
}

// Code gets the status code for the create device type default response
func (o *CreateDeviceTypeDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create device type default response has a 2xx status code
func (o *CreateDeviceTypeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create device type default response has a 3xx status code
func (o *CreateDeviceTypeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create device type default response has a 4xx status code
func (o *CreateDeviceTypeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create device type default response has a 5xx status code
func (o *CreateDeviceTypeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create device type default response a status code equal to that given
func (o *CreateDeviceTypeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateDeviceTypeDefault) Error() string {
	return fmt.Sprintf("[POST /deviceTypes][%d] createDeviceType default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDeviceTypeDefault) String() string {
	return fmt.Sprintf("[POST /deviceTypes][%d] createDeviceType default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDeviceTypeDefault) GetPayload() *CreateDeviceTypeDefaultBody {
	return o.Payload
}

func (o *CreateDeviceTypeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(CreateDeviceTypeDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateDeviceTypeDefaultBody create device type default body
swagger:model CreateDeviceTypeDefaultBody
*/
type CreateDeviceTypeDefaultBody struct {

	// 流量ID
	// Required: true
	RequestID *string `json:"requestId"`

	// error
	// Required: true
	Error *models.ErrorResponse `json:"error"`
}

// Validate validates this create device type default body
func (o *CreateDeviceTypeDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceTypeDefaultBody) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceType default"+"."+"requestId", "body", o.RequestID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceTypeDefaultBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceType default"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceType default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceType default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create device type default body based on the context it is used
func (o *CreateDeviceTypeDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceTypeDefaultBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceType default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceType default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceTypeDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceTypeDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceTypeDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceTypeOKBody create device type o k body
swagger:model CreateDeviceTypeOKBody
*/
type CreateDeviceTypeOKBody struct {

	// result
	Result *models.DeviceTypeID `json:"result,omitempty"`
}

// Validate validates this create device type o k body
func (o *CreateDeviceTypeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceTypeOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceTypeOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceTypeOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create device type o k body based on the context it is used
func (o *CreateDeviceTypeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceTypeOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceTypeOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceTypeOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceTypeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceTypeOKBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceTypeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

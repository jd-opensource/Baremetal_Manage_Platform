// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new image API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for image API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssociatedDeviceType(params *AssociatedDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociatedDeviceTypeOK, error)

	CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageOK, error)

	DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error)

	DescribeImage(params *DescribeImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImageOK, error)

	DescribeImageDeviceTypes(params *DescribeImageDeviceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImageDeviceTypesOK, error)

	DescribeImages(params *DescribeImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImagesOK, error)

	DissociatedDeviceType(params *DissociatedDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DissociatedDeviceTypeOK, error)

	ModifyImage(params *ModifyImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyImageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssociatedDeviceType AssociatedDeviceType 镜像绑定机型
*/
func (a *Client) AssociatedDeviceType(params *AssociatedDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociatedDeviceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociatedDeviceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associatedDeviceType",
		Method:             "POST",
		PathPattern:        "/images/associatedDeviceType",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociatedDeviceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociatedDeviceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociatedDeviceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateImage CreateImage 添加镜像
*/
func (a *Client) CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createImage",
		Method:             "POST",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteImage DeleteImage 删除镜像
*/
func (a *Client) DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteImage",
		Method:             "DELETE",
		PathPattern:        "/images/{image_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeImage DescribeImage 获取镜像详情
*/
func (a *Client) DescribeImage(params *DescribeImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeImage",
		Method:             "GET",
		PathPattern:        "/images/{image_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeImageDeviceTypes DescribeImageDeviceTypes 查看镜像绑定的机型
*/
func (a *Client) DescribeImageDeviceTypes(params *DescribeImageDeviceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImageDeviceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeImageDeviceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeImageDeviceTypes",
		Method:             "GET",
		PathPattern:        "/images/imageDeviceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeImageDeviceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeImageDeviceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeImageDeviceTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeImages DescribeImages 获取镜像列表
*/
func (a *Client) DescribeImages(params *DescribeImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeImages",
		Method:             "GET",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DissociatedDeviceType DissociatedDeviceType 镜像解绑机型
*/
func (a *Client) DissociatedDeviceType(params *DissociatedDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DissociatedDeviceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDissociatedDeviceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dissociatedDeviceType",
		Method:             "DELETE",
		PathPattern:        "/images/dissociatedDeviceType",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DissociatedDeviceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DissociatedDeviceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DissociatedDeviceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyImage ModifyImage 修改镜像(暂不启用)
*/
func (a *Client) ModifyImage(params *ModifyImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyImage",
		Method:             "PUT",
		PathPattern:        "/images/{image_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

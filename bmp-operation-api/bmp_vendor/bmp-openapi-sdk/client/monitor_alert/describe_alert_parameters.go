// Code generated by go-swagger; DO NOT EDIT.

package monitor_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDescribeAlertParams creates a new DescribeAlertParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeAlertParams() *DescribeAlertParams {
	return &DescribeAlertParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeAlertParamsWithTimeout creates a new DescribeAlertParams object
// with the ability to set a timeout on a request.
func NewDescribeAlertParamsWithTimeout(timeout time.Duration) *DescribeAlertParams {
	return &DescribeAlertParams{
		timeout: timeout,
	}
}

// NewDescribeAlertParamsWithContext creates a new DescribeAlertParams object
// with the ability to set a context for a request.
func NewDescribeAlertParamsWithContext(ctx context.Context) *DescribeAlertParams {
	return &DescribeAlertParams{
		Context: ctx,
	}
}

// NewDescribeAlertParamsWithHTTPClient creates a new DescribeAlertParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeAlertParamsWithHTTPClient(client *http.Client) *DescribeAlertParams {
	return &DescribeAlertParams{
		HTTPClient: client,
	}
}

/* DescribeAlertParams contains all the parameters to send to the API endpoint
   for the describe alert operation.

   Typically these are written to a http.Request.
*/
type DescribeAlertParams struct {

	/* AlertID.

	   rule uuid
	*/
	AlertID string

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAlertParams) WithDefaults() *DescribeAlertParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAlertParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe alert params
func (o *DescribeAlertParams) WithTimeout(timeout time.Duration) *DescribeAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe alert params
func (o *DescribeAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe alert params
func (o *DescribeAlertParams) WithContext(ctx context.Context) *DescribeAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe alert params
func (o *DescribeAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe alert params
func (o *DescribeAlertParams) WithHTTPClient(client *http.Client) *DescribeAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe alert params
func (o *DescribeAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlertID adds the alertID to the describe alert params
func (o *DescribeAlertParams) WithAlertID(alertID string) *DescribeAlertParams {
	o.SetAlertID(alertID)
	return o
}

// SetAlertID adds the alertId to the describe alert params
func (o *DescribeAlertParams) SetAlertID(alertID string) {
	o.AlertID = alertID
}

// WithAuthorization adds the authorization to the describe alert params
func (o *DescribeAlertParams) WithAuthorization(authorization string) *DescribeAlertParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe alert params
func (o *DescribeAlertParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe alert params
func (o *DescribeAlertParams) WithBmpLanguage(bmpLanguage *string) *DescribeAlertParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe alert params
func (o *DescribeAlertParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe alert params
func (o *DescribeAlertParams) WithBmpUserID(bmpUserID *string) *DescribeAlertParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe alert params
func (o *DescribeAlertParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithTraceID adds the traceID to the describe alert params
func (o *DescribeAlertParams) WithTraceID(traceID string) *DescribeAlertParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe alert params
func (o *DescribeAlertParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param alertId
	qrAlertID := o.AlertID
	qAlertID := qrAlertID
	if qAlertID != "" {

		if err := r.SetQueryParam("alertId", qAlertID); err != nil {
			return err
		}
	}

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

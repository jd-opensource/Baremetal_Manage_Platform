// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssociateDeviceDisks(params *AssociateDeviceDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateDeviceDisksOK, error)

	CollectDeviceInfo(params *CollectDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectDeviceInfoOK, error)

	CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceOK, error)

	DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceOK, error)

	DescribeDevice(params *DescribeDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceOK, error)

	DescribeDeviceDisks(params *DescribeDeviceDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceDisksOK, error)

	DescribeDeviceStock(params *DescribeDeviceStockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceStockOK, error)

	DescribeDevices(params *DescribeDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDevicesOK, error)

	DeviceAssociateDeviceType(params *DeviceAssociateDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceAssociateDeviceTypeOK, error)

	GetAssociatedDisks(params *GetAssociatedDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssociatedDisksOK, error)

	ModifyDevice(params *ModifyDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyDeviceOK, error)

	MountDevice(params *MountDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MountDeviceOK, error)

	RemoveDevice(params *RemoveDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDeviceOK, error)

	UnMountDevice(params *UnMountDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnMountDeviceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssociateDeviceDisks AssociateDeviceDisks 设备关联磁盘
*/
func (a *Client) AssociateDeviceDisks(params *AssociateDeviceDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateDeviceDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateDeviceDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateDeviceDisks",
		Method:             "PUT",
		PathPattern:        "/devices/disks/associateDisks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociateDeviceDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateDeviceDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociateDeviceDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CollectDeviceInfo CollectDeviceInfo 采集设备信息
*/
func (a *Client) CollectDeviceInfo(params *CollectDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectDeviceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDeviceInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "collectDeviceInfo",
		Method:             "POST",
		PathPattern:        "/collect/collectDeviceInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CollectDeviceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectDeviceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectDeviceInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateDevice CreateDevice 创建设备
*/
func (a *Client) CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDevice",
		Method:             "POST",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDevice DeleteDevice 删除设备
*/
func (a *Client) DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevice",
		Method:             "DELETE",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDevice DescribeDevice 获取设备详情
*/
func (a *Client) DescribeDevice(params *DescribeDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDevice",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceDisks DescribeDeviceDisks 设备详情-磁盘
*/
func (a *Client) DescribeDeviceDisks(params *DescribeDeviceDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceDisks",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/disksDetail",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDeviceStock DescribeDeviceStock 获取指定机型的设备库存
*/
func (a *Client) DescribeDeviceStock(params *DescribeDeviceStockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDeviceStockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDeviceStockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDeviceStock",
		Method:             "DELETE",
		PathPattern:        "/devices/stock",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDeviceStockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDeviceStockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDeviceStockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDevices DescribeDevices 获取设备列表
*/
func (a *Client) DescribeDevices(params *DescribeDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDevices",
		Method:             "GET",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeviceAssociateDeviceType AssociateDeviceType 设备绑定机型
*/
func (a *Client) DeviceAssociateDeviceType(params *DeviceAssociateDeviceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceAssociateDeviceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceAssociateDeviceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deviceAssociateDeviceType",
		Method:             "PUT",
		PathPattern:        "/devices/deviceType/associate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeviceAssociateDeviceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceAssociateDeviceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeviceAssociateDeviceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAssociatedDisks GetAssociatedDisks 获取设备已关联的磁盘
*/
func (a *Client) GetAssociatedDisks(params *GetAssociatedDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssociatedDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAssociatedDisks",
		Method:             "GET",
		PathPattern:        "/devices/disks/describeAssociateDisks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssociatedDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssociatedDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAssociatedDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyDevice ModifyDevice 修改设备信息
*/
func (a *Client) ModifyDevice(params *ModifyDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyDevice",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MountDevice MountDevice 设备上架
*/
func (a *Client) MountDevice(params *MountDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MountDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMountDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mountDevice",
		Method:             "PUT",
		PathPattern:        "/devices/mount",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MountDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MountDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MountDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveDevice DeleteDevice 移除设备
*/
func (a *Client) RemoveDevice(params *RemoveDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDevice",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/remove",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnMountDevice UnMountDevice 设备下架
*/
func (a *Client) UnMountDevice(params *UnMountDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnMountDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnMountDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unMountDevice",
		Method:             "PUT",
		PathPattern:        "/devices/unmount",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnMountDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnMountDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnMountDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

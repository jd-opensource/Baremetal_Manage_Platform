// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDescribeDevicesParams creates a new DescribeDevicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeDevicesParams() *DescribeDevicesParams {
	return &DescribeDevicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeDevicesParamsWithTimeout creates a new DescribeDevicesParams object
// with the ability to set a timeout on a request.
func NewDescribeDevicesParamsWithTimeout(timeout time.Duration) *DescribeDevicesParams {
	return &DescribeDevicesParams{
		timeout: timeout,
	}
}

// NewDescribeDevicesParamsWithContext creates a new DescribeDevicesParams object
// with the ability to set a context for a request.
func NewDescribeDevicesParamsWithContext(ctx context.Context) *DescribeDevicesParams {
	return &DescribeDevicesParams{
		Context: ctx,
	}
}

// NewDescribeDevicesParamsWithHTTPClient creates a new DescribeDevicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeDevicesParamsWithHTTPClient(client *http.Client) *DescribeDevicesParams {
	return &DescribeDevicesParams{
		HTTPClient: client,
	}
}

/* DescribeDevicesParams contains all the parameters to send to the API endpoint
   for the describe devices operation.

   Typically these are written to a http.Request.
*/
type DescribeDevicesParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* CollectStatus.

	   "1"表示已采集，"2"表示未采集，"3"表示采集中,4表示采集失败
	*/
	CollectStatus *string

	/* DeviceSeries.

	   机型类型
	*/
	DeviceSeries *string

	/* DeviceTypeID.

	   机型id
	*/
	DeviceTypeID *string

	/* IdcID.

	   机房id
	*/
	IDcID *string

	/* IloIP.

	   带外ip
	*/
	IloIP *string

	/* InstanceID.

	   实例id
	*/
	InstanceID *string

	/* InstanceName.

	   实例名称
	*/
	InstanceName *string

	/* IPV4.

	   ipv4
	*/
	IPV4 *string

	/* IPV6.

	   ipv6
	*/
	IPV6 *string

	/* IsAll.

	   是否显示全部，1不分页
	*/
	IsAll *string

	/* ManageStatus.

	   设备管理状态
	*/
	ManageStatus *string

	/* PageNumber.

	   页码

	   Format: int64
	*/
	PageNumber *int64

	/* PageSize.

	   每页数量

	   Format: int64
	*/
	PageSize *int64

	/* Sn.

	   设备sn
	*/
	Sn *string

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	/* UserID.

	   所属用户id
	*/
	UserID *string

	/* UserName.

	   所属用户
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeDevicesParams) WithDefaults() *DescribeDevicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeDevicesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe devices params
func (o *DescribeDevicesParams) WithTimeout(timeout time.Duration) *DescribeDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe devices params
func (o *DescribeDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe devices params
func (o *DescribeDevicesParams) WithContext(ctx context.Context) *DescribeDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe devices params
func (o *DescribeDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe devices params
func (o *DescribeDevicesParams) WithHTTPClient(client *http.Client) *DescribeDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe devices params
func (o *DescribeDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the describe devices params
func (o *DescribeDevicesParams) WithAuthorization(authorization string) *DescribeDevicesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe devices params
func (o *DescribeDevicesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe devices params
func (o *DescribeDevicesParams) WithBmpLanguage(bmpLanguage *string) *DescribeDevicesParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe devices params
func (o *DescribeDevicesParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe devices params
func (o *DescribeDevicesParams) WithBmpUserID(bmpUserID *string) *DescribeDevicesParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe devices params
func (o *DescribeDevicesParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithCollectStatus adds the collectStatus to the describe devices params
func (o *DescribeDevicesParams) WithCollectStatus(collectStatus *string) *DescribeDevicesParams {
	o.SetCollectStatus(collectStatus)
	return o
}

// SetCollectStatus adds the collectStatus to the describe devices params
func (o *DescribeDevicesParams) SetCollectStatus(collectStatus *string) {
	o.CollectStatus = collectStatus
}

// WithDeviceSeries adds the deviceSeries to the describe devices params
func (o *DescribeDevicesParams) WithDeviceSeries(deviceSeries *string) *DescribeDevicesParams {
	o.SetDeviceSeries(deviceSeries)
	return o
}

// SetDeviceSeries adds the deviceSeries to the describe devices params
func (o *DescribeDevicesParams) SetDeviceSeries(deviceSeries *string) {
	o.DeviceSeries = deviceSeries
}

// WithDeviceTypeID adds the deviceTypeID to the describe devices params
func (o *DescribeDevicesParams) WithDeviceTypeID(deviceTypeID *string) *DescribeDevicesParams {
	o.SetDeviceTypeID(deviceTypeID)
	return o
}

// SetDeviceTypeID adds the deviceTypeId to the describe devices params
func (o *DescribeDevicesParams) SetDeviceTypeID(deviceTypeID *string) {
	o.DeviceTypeID = deviceTypeID
}

// WithIDcID adds the idcID to the describe devices params
func (o *DescribeDevicesParams) WithIDcID(idcID *string) *DescribeDevicesParams {
	o.SetIDcID(idcID)
	return o
}

// SetIDcID adds the idcId to the describe devices params
func (o *DescribeDevicesParams) SetIDcID(idcID *string) {
	o.IDcID = idcID
}

// WithIloIP adds the iloIP to the describe devices params
func (o *DescribeDevicesParams) WithIloIP(iloIP *string) *DescribeDevicesParams {
	o.SetIloIP(iloIP)
	return o
}

// SetIloIP adds the iloIp to the describe devices params
func (o *DescribeDevicesParams) SetIloIP(iloIP *string) {
	o.IloIP = iloIP
}

// WithInstanceID adds the instanceID to the describe devices params
func (o *DescribeDevicesParams) WithInstanceID(instanceID *string) *DescribeDevicesParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the describe devices params
func (o *DescribeDevicesParams) SetInstanceID(instanceID *string) {
	o.InstanceID = instanceID
}

// WithInstanceName adds the instanceName to the describe devices params
func (o *DescribeDevicesParams) WithInstanceName(instanceName *string) *DescribeDevicesParams {
	o.SetInstanceName(instanceName)
	return o
}

// SetInstanceName adds the instanceName to the describe devices params
func (o *DescribeDevicesParams) SetInstanceName(instanceName *string) {
	o.InstanceName = instanceName
}

// WithIPV4 adds the iPV4 to the describe devices params
func (o *DescribeDevicesParams) WithIPV4(iPV4 *string) *DescribeDevicesParams {
	o.SetIPV4(iPV4)
	return o
}

// SetIPV4 adds the ipv4 to the describe devices params
func (o *DescribeDevicesParams) SetIPV4(iPV4 *string) {
	o.IPV4 = iPV4
}

// WithIPV6 adds the iPV6 to the describe devices params
func (o *DescribeDevicesParams) WithIPV6(iPV6 *string) *DescribeDevicesParams {
	o.SetIPV6(iPV6)
	return o
}

// SetIPV6 adds the ipv6 to the describe devices params
func (o *DescribeDevicesParams) SetIPV6(iPV6 *string) {
	o.IPV6 = iPV6
}

// WithIsAll adds the isAll to the describe devices params
func (o *DescribeDevicesParams) WithIsAll(isAll *string) *DescribeDevicesParams {
	o.SetIsAll(isAll)
	return o
}

// SetIsAll adds the isAll to the describe devices params
func (o *DescribeDevicesParams) SetIsAll(isAll *string) {
	o.IsAll = isAll
}

// WithManageStatus adds the manageStatus to the describe devices params
func (o *DescribeDevicesParams) WithManageStatus(manageStatus *string) *DescribeDevicesParams {
	o.SetManageStatus(manageStatus)
	return o
}

// SetManageStatus adds the manageStatus to the describe devices params
func (o *DescribeDevicesParams) SetManageStatus(manageStatus *string) {
	o.ManageStatus = manageStatus
}

// WithPageNumber adds the pageNumber to the describe devices params
func (o *DescribeDevicesParams) WithPageNumber(pageNumber *int64) *DescribeDevicesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the describe devices params
func (o *DescribeDevicesParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the describe devices params
func (o *DescribeDevicesParams) WithPageSize(pageSize *int64) *DescribeDevicesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the describe devices params
func (o *DescribeDevicesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSn adds the sn to the describe devices params
func (o *DescribeDevicesParams) WithSn(sn *string) *DescribeDevicesParams {
	o.SetSn(sn)
	return o
}

// SetSn adds the sn to the describe devices params
func (o *DescribeDevicesParams) SetSn(sn *string) {
	o.Sn = sn
}

// WithTraceID adds the traceID to the describe devices params
func (o *DescribeDevicesParams) WithTraceID(traceID string) *DescribeDevicesParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe devices params
func (o *DescribeDevicesParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WithUserID adds the userID to the describe devices params
func (o *DescribeDevicesParams) WithUserID(userID *string) *DescribeDevicesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the describe devices params
func (o *DescribeDevicesParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the describe devices params
func (o *DescribeDevicesParams) WithUserName(userName *string) *DescribeDevicesParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the describe devices params
func (o *DescribeDevicesParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.CollectStatus != nil {

		// query param collectStatus
		var qrCollectStatus string

		if o.CollectStatus != nil {
			qrCollectStatus = *o.CollectStatus
		}
		qCollectStatus := qrCollectStatus
		if qCollectStatus != "" {

			if err := r.SetQueryParam("collectStatus", qCollectStatus); err != nil {
				return err
			}
		}
	}

	if o.DeviceSeries != nil {

		// query param deviceSeries
		var qrDeviceSeries string

		if o.DeviceSeries != nil {
			qrDeviceSeries = *o.DeviceSeries
		}
		qDeviceSeries := qrDeviceSeries
		if qDeviceSeries != "" {

			if err := r.SetQueryParam("deviceSeries", qDeviceSeries); err != nil {
				return err
			}
		}
	}

	if o.DeviceTypeID != nil {

		// query param deviceTypeId
		var qrDeviceTypeID string

		if o.DeviceTypeID != nil {
			qrDeviceTypeID = *o.DeviceTypeID
		}
		qDeviceTypeID := qrDeviceTypeID
		if qDeviceTypeID != "" {

			if err := r.SetQueryParam("deviceTypeId", qDeviceTypeID); err != nil {
				return err
			}
		}
	}

	if o.IDcID != nil {

		// query param idcId
		var qrIdcID string

		if o.IDcID != nil {
			qrIdcID = *o.IDcID
		}
		qIdcID := qrIdcID
		if qIdcID != "" {

			if err := r.SetQueryParam("idcId", qIdcID); err != nil {
				return err
			}
		}
	}

	if o.IloIP != nil {

		// query param iloIp
		var qrIloIP string

		if o.IloIP != nil {
			qrIloIP = *o.IloIP
		}
		qIloIP := qrIloIP
		if qIloIP != "" {

			if err := r.SetQueryParam("iloIp", qIloIP); err != nil {
				return err
			}
		}
	}

	if o.InstanceID != nil {

		// query param instanceId
		var qrInstanceID string

		if o.InstanceID != nil {
			qrInstanceID = *o.InstanceID
		}
		qInstanceID := qrInstanceID
		if qInstanceID != "" {

			if err := r.SetQueryParam("instanceId", qInstanceID); err != nil {
				return err
			}
		}
	}

	if o.InstanceName != nil {

		// query param instanceName
		var qrInstanceName string

		if o.InstanceName != nil {
			qrInstanceName = *o.InstanceName
		}
		qInstanceName := qrInstanceName
		if qInstanceName != "" {

			if err := r.SetQueryParam("instanceName", qInstanceName); err != nil {
				return err
			}
		}
	}

	if o.IPV4 != nil {

		// query param ipv4
		var qrIPV4 string

		if o.IPV4 != nil {
			qrIPV4 = *o.IPV4
		}
		qIPV4 := qrIPV4
		if qIPV4 != "" {

			if err := r.SetQueryParam("ipv4", qIPV4); err != nil {
				return err
			}
		}
	}

	if o.IPV6 != nil {

		// query param ipv6
		var qrIPV6 string

		if o.IPV6 != nil {
			qrIPV6 = *o.IPV6
		}
		qIPV6 := qrIPV6
		if qIPV6 != "" {

			if err := r.SetQueryParam("ipv6", qIPV6); err != nil {
				return err
			}
		}
	}

	if o.IsAll != nil {

		// query param isAll
		var qrIsAll string

		if o.IsAll != nil {
			qrIsAll = *o.IsAll
		}
		qIsAll := qrIsAll
		if qIsAll != "" {

			if err := r.SetQueryParam("isAll", qIsAll); err != nil {
				return err
			}
		}
	}

	if o.ManageStatus != nil {

		// query param manageStatus
		var qrManageStatus string

		if o.ManageStatus != nil {
			qrManageStatus = *o.ManageStatus
		}
		qManageStatus := qrManageStatus
		if qManageStatus != "" {

			if err := r.SetQueryParam("manageStatus", qManageStatus); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Sn != nil {

		// query param sn
		var qrSn string

		if o.Sn != nil {
			qrSn = *o.Sn
		}
		qSn := qrSn
		if qSn != "" {

			if err := r.SetQueryParam("sn", qSn); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if o.UserID != nil {

		// query param userId
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param userName
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

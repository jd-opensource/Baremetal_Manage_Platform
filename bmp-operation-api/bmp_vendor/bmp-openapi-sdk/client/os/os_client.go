// Code generated by go-swagger; DO NOT EDIT.

package os

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new os API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for os API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOS(params *CreateOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOSOK, error)

	DeleteOS(params *DeleteOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOSOK, error)

	DescribeOS(params *DescribeOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeOSOK, error)

	DescribeOSs(params *DescribeOSsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeOSsOK, error)

	ModifyOS(params *ModifyOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyOSOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOS CreateOS 添加操作系统(暂不启用)
*/
func (a *Client) CreateOS(params *CreateOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOS",
		Method:             "POST",
		PathPattern:        "/oss",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteOS DeleteOS 删除os(暂不启用)
*/
func (a *Client) DeleteOS(params *DeleteOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOS",
		Method:             "DELETE",
		PathPattern:        "/oss/{os_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeOS DescribeOS 获取os系统详情(暂不启用)
*/
func (a *Client) DescribeOS(params *DescribeOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeOS",
		Method:             "GET",
		PathPattern:        "/oss/{os_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeOSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeOSs DescribeOSs 获取os列表(暂不启用)
*/
func (a *Client) DescribeOSs(params *DescribeOSsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeOSsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeOSsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeOSs",
		Method:             "GET",
		PathPattern:        "/oss",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeOSsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeOSsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeOSsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyOS ModifyOS 修改os信息(暂不启用)
*/
func (a *Client) ModifyOS(params *ModifyOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyOS",
		Method:             "PUT",
		PathPattern:        "/oss/{os_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyOSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserOK, error)

	DescribeLocalUser(params *DescribeLocalUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeLocalUserOK, error)

	DescribeUser(params *DescribeUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserOK, error)

	DescribeUserByName(params *DescribeUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserByNameOK, error)

	DescribeUsers(params *DescribeUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUsersOK, error)

	ModifyLocalUser(params *ModifyLocalUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyLocalUserOK, error)

	ModifyLocalUserPassword(params *ModifyLocalUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyLocalUserPasswordOK, error)

	ModifyUser(params *ModifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserOK, error)

	VerifyUser(params *VerifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUser CreateUser 创建用户
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUser DeleteUser 删除用户
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeLocalUser DescribeLocalUser 控制台获取用户详情
*/
func (a *Client) DescribeLocalUser(params *DescribeLocalUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeLocalUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeLocalUser",
		Method:             "GET",
		PathPattern:        "/local/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeLocalUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUser DescribeUser 获取用户详情
*/
func (a *Client) DescribeUser(params *DescribeUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUser",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUserByName DescribeUserByName 根据用户名获取用户详情
*/
func (a *Client) DescribeUserByName(params *DescribeUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUserByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUserByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUserByName",
		Method:             "GET",
		PathPattern:        "/users/getUserByName",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUserByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUserByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUserByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeUsers DescribeUsers 获取用户列表
*/
func (a *Client) DescribeUsers(params *DescribeUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyLocalUser ModifyLocalUser 控制台修改除密码外的个人信息
*/
func (a *Client) ModifyLocalUser(params *ModifyLocalUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyLocalUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyLocalUser",
		Method:             "PUT",
		PathPattern:        "/local/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyLocalUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyLocalUserPassword ModifyLocalUserPassword 控制台修改个人密码
*/
func (a *Client) ModifyLocalUserPassword(params *ModifyLocalUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyLocalUserPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyLocalUserPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyLocalUserPassword",
		Method:             "PUT",
		PathPattern:        "/local/users/password",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyLocalUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyLocalUserPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyLocalUserPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModifyUser ModifyUser 修改用户信息
*/
func (a *Client) ModifyUser(params *ModifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyUser",
		Method:             "PUT",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModifyUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VerifyUser VerifyUser 鉴定用户
*/
func (a *Client) VerifyUser(params *VerifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verifyUser",
		Method:             "POST",
		PathPattern:        "/users/verify",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VerifyUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

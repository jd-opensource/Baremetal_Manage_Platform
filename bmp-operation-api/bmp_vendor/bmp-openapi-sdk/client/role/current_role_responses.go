// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"coding.jd.com/aidc-bmp/bmp-openapi-sdk/models"
)

// CurrentRoleReader is a Reader for the CurrentRole structure.
type CurrentRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CurrentRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCurrentRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCurrentRoleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCurrentRoleOK creates a CurrentRoleOK with default headers values
func NewCurrentRoleOK() *CurrentRoleOK {
	return &CurrentRoleOK{}
}

/* CurrentRoleOK describes a response with status code 200, with default header values.

A CurrentRoleResult is an response struct that is used to describe role.
*/
type CurrentRoleOK struct {

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *CurrentRoleOKBody
}

// IsSuccess returns true when this current role o k response has a 2xx status code
func (o *CurrentRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this current role o k response has a 3xx status code
func (o *CurrentRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this current role o k response has a 4xx status code
func (o *CurrentRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this current role o k response has a 5xx status code
func (o *CurrentRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this current role o k response a status code equal to that given
func (o *CurrentRoleOK) IsCode(code int) bool {
	return code == 200
}

func (o *CurrentRoleOK) Error() string {
	return fmt.Sprintf("[GET /roles/roleInfo/current][%d] currentRoleOK  %+v", 200, o.Payload)
}

func (o *CurrentRoleOK) String() string {
	return fmt.Sprintf("[GET /roles/roleInfo/current][%d] currentRoleOK  %+v", 200, o.Payload)
}

func (o *CurrentRoleOK) GetPayload() *CurrentRoleOKBody {
	return o.Payload
}

func (o *CurrentRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(CurrentRoleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrentRoleDefault creates a CurrentRoleDefault with default headers values
func NewCurrentRoleDefault(code int) *CurrentRoleDefault {
	return &CurrentRoleDefault{
		_statusCode: code,
	}
}

/* CurrentRoleDefault describes a response with status code -1, with default header values.

unit err response for non 200
*/
type CurrentRoleDefault struct {
	_statusCode int

	/* 流量ID
	in: header
	*/
	TraceID string

	Payload *CurrentRoleDefaultBody
}

// Code gets the status code for the current role default response
func (o *CurrentRoleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this current role default response has a 2xx status code
func (o *CurrentRoleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this current role default response has a 3xx status code
func (o *CurrentRoleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this current role default response has a 4xx status code
func (o *CurrentRoleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this current role default response has a 5xx status code
func (o *CurrentRoleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this current role default response a status code equal to that given
func (o *CurrentRoleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CurrentRoleDefault) Error() string {
	return fmt.Sprintf("[GET /roles/roleInfo/current][%d] currentRole default  %+v", o._statusCode, o.Payload)
}

func (o *CurrentRoleDefault) String() string {
	return fmt.Sprintf("[GET /roles/roleInfo/current][%d] currentRole default  %+v", o._statusCode, o.Payload)
}

func (o *CurrentRoleDefault) GetPayload() *CurrentRoleDefaultBody {
	return o.Payload
}

func (o *CurrentRoleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header traceId
	hdrTraceID := response.GetHeader("traceId")

	if hdrTraceID != "" {
		o.TraceID = hdrTraceID
	}

	o.Payload = new(CurrentRoleDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CurrentRoleDefaultBody current role default body
swagger:model CurrentRoleDefaultBody
*/
type CurrentRoleDefaultBody struct {

	// 流量ID
	// Required: true
	RequestID *string `json:"requestId"`

	// error
	// Required: true
	Error *models.ErrorResponse `json:"error"`
}

// Validate validates this current role default body
func (o *CurrentRoleDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrentRoleDefaultBody) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("currentRole default"+"."+"requestId", "body", o.RequestID); err != nil {
		return err
	}

	return nil
}

func (o *CurrentRoleDefaultBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("currentRole default"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentRole default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentRole default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this current role default body based on the context it is used
func (o *CurrentRoleDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrentRoleDefaultBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentRole default" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentRole default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CurrentRoleDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrentRoleDefaultBody) UnmarshalBinary(b []byte) error {
	var res CurrentRoleDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CurrentRoleOKBody current role o k body
swagger:model CurrentRoleOKBody
*/
type CurrentRoleOKBody struct {

	// result
	Result *models.RoleInfo `json:"result,omitempty"`
}

// Validate validates this current role o k body
func (o *CurrentRoleOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrentRoleOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentRoleOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentRoleOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this current role o k body based on the context it is used
func (o *CurrentRoleOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrentRoleOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentRoleOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentRoleOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CurrentRoleOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrentRoleOKBody) UnmarshalBinary(b []byte) error {
	var res CurrentRoleOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDescribeAuditLogsParams creates a new DescribeAuditLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDescribeAuditLogsParams() *DescribeAuditLogsParams {
	return &DescribeAuditLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeAuditLogsParamsWithTimeout creates a new DescribeAuditLogsParams object
// with the ability to set a timeout on a request.
func NewDescribeAuditLogsParamsWithTimeout(timeout time.Duration) *DescribeAuditLogsParams {
	return &DescribeAuditLogsParams{
		timeout: timeout,
	}
}

// NewDescribeAuditLogsParamsWithContext creates a new DescribeAuditLogsParams object
// with the ability to set a context for a request.
func NewDescribeAuditLogsParamsWithContext(ctx context.Context) *DescribeAuditLogsParams {
	return &DescribeAuditLogsParams{
		Context: ctx,
	}
}

// NewDescribeAuditLogsParamsWithHTTPClient creates a new DescribeAuditLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDescribeAuditLogsParamsWithHTTPClient(client *http.Client) *DescribeAuditLogsParams {
	return &DescribeAuditLogsParams{
		HTTPClient: client,
	}
}

/* DescribeAuditLogsParams contains all the parameters to send to the API endpoint
   for the describe audit logs operation.

   Typically these are written to a http.Request.
*/
type DescribeAuditLogsParams struct {

	/* Authorization.

	   demo: curl -X GET -H "Authorization:Bearer wwabmrpdxz04qa10frpuw7key9qkd9bu" http://127.0.0.1:8801/v1/idcs 请使用个人自己创建apikey时候的token
	*/
	Authorization string

	/* BmpLanguage.

	   用户语言 [zh_CN, en_US]
	*/
	BmpLanguage *string

	/* BmpUserID.

	   用户uuid, deprecated
	*/
	BmpUserID *string

	/* EndTime.

	   操作时间上限

	   Format: int64
	*/
	EndTime *int64

	/* IsAll.

	   是否显示所有
	*/
	IsAll *string

	/* Operation.

	   操作名称
	*/
	Operation *string

	/* PageNumber.

	   页码

	   Format: int64
	*/
	PageNumber *int64

	/* PageSize.

	   每页数量

	   Format: int64
	*/
	PageSize *int64

	/* Result.

	   result
	*/
	Result *string

	/* Sn.

	   sn
	*/
	Sn *string

	/* StartTime.

	   操作时间下限

	   Format: int64
	*/
	StartTime *int64

	/* TraceID.

	   流量唯一id
	*/
	TraceID string

	/* Username.

	   操作人
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the describe audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAuditLogsParams) WithDefaults() *DescribeAuditLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the describe audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DescribeAuditLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the describe audit logs params
func (o *DescribeAuditLogsParams) WithTimeout(timeout time.Duration) *DescribeAuditLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe audit logs params
func (o *DescribeAuditLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe audit logs params
func (o *DescribeAuditLogsParams) WithContext(ctx context.Context) *DescribeAuditLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe audit logs params
func (o *DescribeAuditLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe audit logs params
func (o *DescribeAuditLogsParams) WithHTTPClient(client *http.Client) *DescribeAuditLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe audit logs params
func (o *DescribeAuditLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the describe audit logs params
func (o *DescribeAuditLogsParams) WithAuthorization(authorization string) *DescribeAuditLogsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the describe audit logs params
func (o *DescribeAuditLogsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBmpLanguage adds the bmpLanguage to the describe audit logs params
func (o *DescribeAuditLogsParams) WithBmpLanguage(bmpLanguage *string) *DescribeAuditLogsParams {
	o.SetBmpLanguage(bmpLanguage)
	return o
}

// SetBmpLanguage adds the bmpLanguage to the describe audit logs params
func (o *DescribeAuditLogsParams) SetBmpLanguage(bmpLanguage *string) {
	o.BmpLanguage = bmpLanguage
}

// WithBmpUserID adds the bmpUserID to the describe audit logs params
func (o *DescribeAuditLogsParams) WithBmpUserID(bmpUserID *string) *DescribeAuditLogsParams {
	o.SetBmpUserID(bmpUserID)
	return o
}

// SetBmpUserID adds the bmpUserId to the describe audit logs params
func (o *DescribeAuditLogsParams) SetBmpUserID(bmpUserID *string) {
	o.BmpUserID = bmpUserID
}

// WithEndTime adds the endTime to the describe audit logs params
func (o *DescribeAuditLogsParams) WithEndTime(endTime *int64) *DescribeAuditLogsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the describe audit logs params
func (o *DescribeAuditLogsParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithIsAll adds the isAll to the describe audit logs params
func (o *DescribeAuditLogsParams) WithIsAll(isAll *string) *DescribeAuditLogsParams {
	o.SetIsAll(isAll)
	return o
}

// SetIsAll adds the isAll to the describe audit logs params
func (o *DescribeAuditLogsParams) SetIsAll(isAll *string) {
	o.IsAll = isAll
}

// WithOperation adds the operation to the describe audit logs params
func (o *DescribeAuditLogsParams) WithOperation(operation *string) *DescribeAuditLogsParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the describe audit logs params
func (o *DescribeAuditLogsParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WithPageNumber adds the pageNumber to the describe audit logs params
func (o *DescribeAuditLogsParams) WithPageNumber(pageNumber *int64) *DescribeAuditLogsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the describe audit logs params
func (o *DescribeAuditLogsParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the describe audit logs params
func (o *DescribeAuditLogsParams) WithPageSize(pageSize *int64) *DescribeAuditLogsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the describe audit logs params
func (o *DescribeAuditLogsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithResult adds the result to the describe audit logs params
func (o *DescribeAuditLogsParams) WithResult(result *string) *DescribeAuditLogsParams {
	o.SetResult(result)
	return o
}

// SetResult adds the result to the describe audit logs params
func (o *DescribeAuditLogsParams) SetResult(result *string) {
	o.Result = result
}

// WithSn adds the sn to the describe audit logs params
func (o *DescribeAuditLogsParams) WithSn(sn *string) *DescribeAuditLogsParams {
	o.SetSn(sn)
	return o
}

// SetSn adds the sn to the describe audit logs params
func (o *DescribeAuditLogsParams) SetSn(sn *string) {
	o.Sn = sn
}

// WithStartTime adds the startTime to the describe audit logs params
func (o *DescribeAuditLogsParams) WithStartTime(startTime *int64) *DescribeAuditLogsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the describe audit logs params
func (o *DescribeAuditLogsParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WithTraceID adds the traceID to the describe audit logs params
func (o *DescribeAuditLogsParams) WithTraceID(traceID string) *DescribeAuditLogsParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the describe audit logs params
func (o *DescribeAuditLogsParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WithUserName adds the username to the describe audit logs params
func (o *DescribeAuditLogsParams) WithUserName(username *string) *DescribeAuditLogsParams {
	o.SetUserName(username)
	return o
}

// SetUserName adds the username to the describe audit logs params
func (o *DescribeAuditLogsParams) SetUserName(username *string) {
	o.UserName = username
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeAuditLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param authorization
	if err := r.SetHeaderParam("authorization", o.Authorization); err != nil {
		return err
	}

	if o.BmpLanguage != nil {

		// header param bmpLanguage
		if err := r.SetHeaderParam("bmpLanguage", *o.BmpLanguage); err != nil {
			return err
		}
	}

	if o.BmpUserID != nil {

		// header param bmpUserId
		if err := r.SetHeaderParam("bmpUserId", *o.BmpUserID); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.IsAll != nil {

		// query param isAll
		var qrIsAll string

		if o.IsAll != nil {
			qrIsAll = *o.IsAll
		}
		qIsAll := qrIsAll
		if qIsAll != "" {

			if err := r.SetQueryParam("isAll", qIsAll); err != nil {
				return err
			}
		}
	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string

		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Result != nil {

		// query param result
		var qrResult string

		if o.Result != nil {
			qrResult = *o.Result
		}
		qResult := qrResult
		if qResult != "" {

			if err := r.SetQueryParam("result", qResult); err != nil {
				return err
			}
		}
	}

	if o.Sn != nil {

		// query param sn
		var qrSn string

		if o.Sn != nil {
			qrSn = *o.Sn
		}
		qSn := qrSn
		if qSn != "" {

			if err := r.SetQueryParam("sn", qSn); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	// header param traceId
	if err := r.SetHeaderParam("traceId", o.TraceID); err != nil {
		return err
	}

	if o.UserName != nil {

		// query param username
		var qrUsername string

		if o.UserName != nil {
			qrUsername = *o.UserName
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MailDialRequest mail dial request
//
// swagger:model MailDialRequest
type MailDialRequest struct {

	// 管理员邮箱
	// Required: true
	AdminAddr *string `json:"admin_addr"`

	// 管理员邮箱密码
	// Required: true
	AdminPass *string `json:"admin_pass"`

	// 邮件服务器地址
	// Required: true
	ServerAddr *string `json:"server_addr"`

	// 邮件服务器端口
	// Required: true
	ServerPort *string `json:"server_port"`

	// 收件人邮箱地址
	To string `json:"to,omitempty"`
}

// Validate validates this mail dial request
func (m *MailDialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminPass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailDialRequest) validateAdminAddr(formats strfmt.Registry) error {

	if err := validate.Required("admin_addr", "body", m.AdminAddr); err != nil {
		return err
	}

	return nil
}

func (m *MailDialRequest) validateAdminPass(formats strfmt.Registry) error {

	if err := validate.Required("admin_pass", "body", m.AdminPass); err != nil {
		return err
	}

	return nil
}

func (m *MailDialRequest) validateServerAddr(formats strfmt.Registry) error {

	if err := validate.Required("server_addr", "body", m.ServerAddr); err != nil {
		return err
	}

	return nil
}

func (m *MailDialRequest) validateServerPort(formats strfmt.Registry) error {

	if err := validate.Required("server_port", "body", m.ServerPort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mail dial request based on context it is used
func (m *MailDialRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MailDialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailDialRequest) UnmarshalBinary(b []byte) error {
	var res MailDialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

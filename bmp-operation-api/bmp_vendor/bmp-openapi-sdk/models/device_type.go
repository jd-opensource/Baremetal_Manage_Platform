// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceType device type
//
// swagger:model DeviceType
type DeviceType struct {

	// 体系架构，如i386/x86_64/ ARM64 (aarch64)，默认 x86_64
	Architecture string `json:"architecture,omitempty"`

	// boot模式
	BootMode string `json:"boot_mode,omitempty"`

	// cpu数量
	CPUAmount int64 `json:"cpuAmount,omitempty"`

	// 单个cpu内核数
	CPUCores int64 `json:"cpuCores,omitempty"`

	// cpu频率(G)
	CPUFrequency string `json:"cpuFrequency,omitempty"`

	// cpu厂商
	CPUManufacturer string `json:"cpuManufacturer,omitempty"`

	// cpu处理器型号
	CPUModel string `json:"cpuModel,omitempty"`

	// 拼装信息
	CPUInfo string `json:"cpuInfo,omitempty"`

	// CPU 规格,预置还是其它
	CPUSpec string `json:"cpuSpec,omitempty"`

	// 数据盘类型（SSD，HDD）
	// DataVolumeType string `json:"dataVolumeType"`
	// 数据盘接口类型（SATA,SAS,NVME）
	// DataVolumeInterfaceType string `json:"dataVolumeInterfaceType"`
	// 数据盘单盘大小
	// DataVolumeSize int `json:"dataVolumeSize"`
	// 数据盘单位（GB，TB）
	// DataVolumeUnit string `json:"dataVolumeUnit"`
	// 数据盘数量
	// DataVolumeAmount int `json:"dataVolumeAmount"`
	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// 描述
	Description string `json:"description,omitempty"`

	// device count
	DeviceCount int64 `json:"deviceCount,omitempty"`

	// 机型类型，如计算型，存储型
	DeviceSeries string `json:"deviceSeries,omitempty"`

	// 机型类型，如计算型，存储型
	DeviceSeriesName string `json:"deviceSeriesName,omitempty"`

	// 机型规格, cps.c.normal
	DeviceType string `json:"deviceType,omitempty"`

	// 机型uuid
	DeviceTypeID string `json:"deviceTypeId,omitempty"`

	// dv info
	DvInfo string `json:"dvInfo,omitempty"`

	// gpu数量
	GpuAmount int64 `json:"gpuAmount,omitempty"`

	// gpu info
	GpuInfo string `json:"gpuInfo,omitempty"`

	// gpu厂商
	GpuManufacturer string `json:"gpuManufacturer,omitempty"`

	// gpu处理器型号
	GpuModel string `json:"gpuModel,omitempty"`

	// 显示机型高度
	Height int64 `json:"height,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// 机房uuid
	IDcID string `json:"idcId,omitempty"`

	// 机房名称
	IDcName string `json:"idcName,omitempty"`

	// 机房名称
	IDcNameEn string `json:"idcNameEn,omitempty"`

	// instance count
	InstanceCount int64 `json:"instanceCount,omitempty"`

	// instance status
	InstanceStatus []string `json:"instanceStatus"`

	// bond单网口,dual双网口
	InterfaceMode string `json:"interfaceMode,omitempty"`

	// 阵列卡是否需要配置
	IsNeedRaid string `json:"isNeedRaid,omitempty"`

	// 内存数量
	MemAmount int64 `json:"memAmount,omitempty"`

	// 内存主频（MHz)
	MemFrequency int64 `json:"memFrequency,omitempty"`

	// mem info
	MemInfo string `json:"memInfo,omitempty"`

	// 单个内存大小(GB)
	MemSize int64 `json:"memSize,omitempty"`

	// 内存 规格,预置还是其它
	MemSpec string `json:"memSpec,omitempty"`

	// 内存接口（如DDR3，DDR4）
	MemType string `json:"memType,omitempty"`

	// 机型名称，如计算效能型,标准计算型
	Name string `json:"name,omitempty"`

	// 网卡数量
	NicAmount int64 `json:"nicAmount,omitempty"`

	// nic info
	NicInfo string `json:"nicInfo,omitempty"`

	// 网卡传输速率(GE)
	NicRate int64 `json:"nicRate,omitempty"`

	// 系统盘raid
	Raid string `json:"raid,omitempty"`

	// 系统盘类型（SSD，HDD）
	// SystemVolumeType string `json:"systemVolumeType"`
	// 系统盘接口类型（SATA,SAS,NVME）
	// SystemVolumeInterfaceType string `json:"systemVolumeInterfaceType"`
	// 系统盘单盘大小
	// SystemVolumeSize int `json:"systemVolumeSize"`
	// 系统盘单位（GB，TB）
	// SystemVolumeUnit string `json:"systemVolumeUnit"`
	// 系统盘数量
	// SystemVolumeAmount int `json:"systemVolumeAmount"`*/
	// 是否做raid，[RAID/NORAID]
	RaidCan string `json:"raidCan,omitempty"`

	// StockAvailable 可用库存
	StockAvailable int64 `json:"stockAvailable,omitempty"`

	// sv info
	SvInfo string `json:"svInfo,omitempty"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`

	// volumes
	Volumes []*Volume `json:"volumes"`
}

// Validate validates this device type
func (m *DeviceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceType) validateVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device type based on the context it is used
func (m *DeviceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceType) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumes); i++ {

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceType) UnmarshalBinary(b []byte) error {
	var res DeviceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

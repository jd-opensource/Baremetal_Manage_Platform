// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Apikey apikey
//
// swagger:model Apikey
type Apikey struct {

	// apikey uuid
	// Required: true
	ApikeyID *string `json:"apiKeyId"`

	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// 名称
	// Required: true
	Name *string `json:"name"`

	// 是否支持只读, [0/1], 1表示只读
	// Required: true
	ReadOnly *int8 `json:"readOnly"`

	// 32位字符令牌，使用token来独立访问openapi
	// Required: true
	Token *string `json:"token"`

	// apikey的类型，[system/user]
	// Required: true
	Type *string `json:"type"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`

	// 所属用户uuid
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this apikey
func (m *Apikey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApikeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Apikey) validateApikeyID(formats strfmt.Registry) error {

	if err := validate.Required("apiKeyId", "body", m.ApikeyID); err != nil {
		return err
	}

	return nil
}

func (m *Apikey) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Apikey) validateReadOnly(formats strfmt.Registry) error {

	if err := validate.Required("readOnly", "body", m.ReadOnly); err != nil {
		return err
	}

	return nil
}

func (m *Apikey) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *Apikey) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Apikey) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this apikey based on context it is used
func (m *Apikey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Apikey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Apikey) UnmarshalBinary(b []byte) error {
	var res Apikey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

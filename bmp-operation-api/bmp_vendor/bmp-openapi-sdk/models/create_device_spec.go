// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDeviceSpec create device spec
//
// swagger:model CreateDeviceSpec
type CreateDeviceSpec struct {

	// 品牌
	// Required: true
	Cabinet *string `json:"cabinet"`

	// MAC2（eth1）
	// Required: true
	Description *string `json:"description"`

	// eth1子网掩码
	// MaskEth1 string `json:"maskEth1" validate:"omitempty,min=1,max=128"` // eth1子网掩码
	// 网关地址
	// Required: true
	Gateway *string `json:"gateway"`

	// 带外IP
	// Required: true
	IloIP *string `json:"iloIp"`

	// 带外密码
	IloPassword string `json:"iloPassword,omitempty"`

	// 带外账号
	IloUser string `json:"iloUser,omitempty"`

	// instance ID
	InstanceID string `json:"instanceId,omitempty"`

	// MAC1（eth0）
	// Required: true
	Mac1 *string `json:"mac1"`

	// 设备状态，默认已入库
	ManageStatus string `json:"manageStatus,omitempty"`

	// 网口交换机IP
	// SwitchIP string `json:"switchIp"` // 网口交换机IP
	// 子网掩码
	// Required: true
	Mask *string `json:"mask"`

	// 内网IPV4
	// Required: true
	PrivateIPV4 *string `json:"privateIpv4"`

	// eth1内网IPV4(非bond模式时传值)
	// PrivateEth1IPv4 string `json:"privateEth1Ipv4" validate:"omitempty,min=1,max=128"` // eth1内网IPV4
	// 内网IPV6
	PrivateIPV6 string `json:"privateIpv6,omitempty"`

	// 设备SN
	// Required: true
	Sn *string `json:"sn"`

	// 所在U位
	// Required: true
	UPosition *string `json:"uPosition"`
}

// Validate validates this create device spec
func (m *CreateDeviceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCabinet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIloIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUPosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDeviceSpec) validateCabinet(formats strfmt.Registry) error {

	if err := validate.Required("cabinet", "body", m.Cabinet); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateIloIP(formats strfmt.Registry) error {

	if err := validate.Required("iloIp", "body", m.IloIP); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateMac1(formats strfmt.Registry) error {

	if err := validate.Required("mac1", "body", m.Mac1); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateMask(formats strfmt.Registry) error {

	if err := validate.Required("mask", "body", m.Mask); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validatePrivateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("privateIpv4", "body", m.PrivateIPV4); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateSn(formats strfmt.Registry) error {

	if err := validate.Required("sn", "body", m.Sn); err != nil {
		return err
	}

	return nil
}

func (m *CreateDeviceSpec) validateUPosition(formats strfmt.Registry) error {

	if err := validate.Required("uPosition", "body", m.UPosition); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create device spec based on context it is used
func (m *CreateDeviceSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateDeviceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDeviceSpec) UnmarshalBinary(b []byte) error {
	var res CreateDeviceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

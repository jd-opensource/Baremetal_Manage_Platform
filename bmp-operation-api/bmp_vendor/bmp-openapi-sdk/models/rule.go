// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Rule rule
//
// swagger:model Rule
type Rule struct {

	// 盘符、挂载点、网口列表
	DeviceTag string `json:"deviceTag,omitempty"`

	// 维度 [instance、disk、mountpoint、nic]
	Dimension string `json:"dimension,omitempty"`

	// 维度名称 [实例、盘符、挂载点、网卡]
	DimensionName string `json:"dimensionName,omitempty"`

	// 关联实例个数
	InstanceCount int64 `json:"instanceCount,omitempty"`

	// 实例id列表
	InstanceIds []string `json:"instanceIds"`

	// 实例详细信息
	Instances []*Instance `json:"instances"`

	// 此规则关联的资源数
	RelatedResourceCount int64 `json:"relatedResourceCount,omitempty"`

	// 资源类型,目前只支持instance
	Resource string `json:"resource,omitempty"`

	// 资源类型名称 实例
	ResourceName string `json:"resourceName,omitempty"`

	// 规则uuid
	RuleID string `json:"ruleId,omitempty"`

	// 规则名称
	RuleName string `json:"ruleName,omitempty"`

	// 规则状态[1->正常，2->已禁用，3->报警]
	Status int64 `json:"status,omitempty"`

	// 规则状态名称
	StatusName string `json:"statusName,omitempty"`

	// 触发条件描述
	TriggerDescription []string `json:"triggerDescription"`

	// 触发条件
	TriggerOption []*RuleTrigger `json:"triggerOption"`

	// user_id
	UserID string `json:"userId,omitempty"`

	// user_name
	UserName string `json:"userName,omitempty"`

	// notice option
	NoticeOption *RuleNotice `json:"noticeOption,omitempty"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) validateTriggerOption(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerOption) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerOption); i++ {
		if swag.IsZero(m.TriggerOption[i]) { // not required
			continue
		}

		if m.TriggerOption[i] != nil {
			if err := m.TriggerOption[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) validateNoticeOption(formats strfmt.Registry) error {
	if swag.IsZero(m.NoticeOption) { // not required
		return nil
	}

	if m.NoticeOption != nil {
		if err := m.NoticeOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noticeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noticeOption")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rule based on the context it is used
func (m *Rule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoticeOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {
			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) contextValidateTriggerOption(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerOption); i++ {

		if m.TriggerOption[i] != nil {
			if err := m.TriggerOption[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerOption" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) contextValidateNoticeOption(ctx context.Context, formats strfmt.Registry) error {

	if m.NoticeOption != nil {
		if err := m.NoticeOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noticeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noticeOption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

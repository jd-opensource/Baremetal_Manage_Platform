// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// cpu数量
	CPUAmount int64 `json:"cpuAmount,omitempty"`

	// 单个cpu内核数
	CPUCores int64 `json:"cpuCores,omitempty"`

	// cpu频率(GHz)
	CPUFrequency string `json:"cpuFrequency,omitempty"`

	// cpu厂商
	CPUManufacturer string `json:"cpuManufacturer,omitempty"`

	// cpu处理器型号
	CPUModel string `json:"cpuModel,omitempty"`

	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`

	// 创建时间
	CreatedTime string `json:"createdTime,omitempty"`

	// 数据盘数量
	DataVolumeAmount int64 `json:"dataVolumeAmount,omitempty"`

	// 数据盘接口类型（SATA,SAS,NVME）
	DataVolumeInterfaceType string `json:"dataVolumeInterfaceType,omitempty"`

	// 数据盘raidId
	DataVolumeRaidID string `json:"dataVolumeRaidId,omitempty"`

	// 数据盘raid名称
	DataVolumeRaidName string `json:"DataVolumeRaidName,omitempty"`

	// 数据盘单盘大小
	DataVolumeSize int64 `json:"dataVolumeSize,omitempty"`

	// 数据盘类型（SSD，HDD）
	DataVolumeType string `json:"dataVolumeType,omitempty"`

	// 系统盘单位
	DataVolumeUnit string `json:"dataVolumeUnit,omitempty"`

	// 实例描述
	Description string `json:"description,omitempty"`

	// 设备uuid
	DeviceID string `json:"deviceId,omitempty"`

	// 机型类型，如computer
	DeviceSeries string `json:"deviceSeries,omitempty"`

	// 机型类型，如计算型，存储型
	DeviceSeriesName string `json:"deviceSeriesName,omitempty"`

	// 机型规格, cps.c.normal
	DeviceType string `json:"deviceType,omitempty"`

	// 机型uuid
	DeviceTypeID string `json:"deviceTypeId,omitempty"`

	// 机型名称，如计算效能型,标准计算型
	DeviceTypeName string `json:"deviceTypeName,omitempty"`

	// gpu数量
	GpuAmount int64 `json:"gpuAmount,omitempty"`

	// gpu厂商
	GpuManufacturer string `json:"gpuManufacturer,omitempty"`

	// gpu处理器型号
	GpuModel string `json:"gpuModel,omitempty"`

	// 主机名
	Hostname string `json:"hostname,omitempty"`

	// 机房uuid
	IDcID string `json:"idcId,omitempty"`

	// 机房名称
	IdcName string `json:"idcName,omitempty"`

	// 带外管理IP
	IloIP string `json:"iloIp,omitempty"`

	// 镜像uuid
	ImageID string `json:"imageId,omitempty"`

	// 镜像名称
	ImageName string `json:"imageName,omitempty"`

	// 实例uuid
	InstanceID string `json:"instanceId,omitempty"`

	// 实例名称
	InstanceName string `json:"instanceName,omitempty"`

	// 实例的volume和raid信息
	InstanceVolumeRaids []*InstanceVolumeRaid `json:"volumeRaid"`

	// 【网口模式】【网络设置】: bond单网口,dual双网口
	InterfaceMode string `json:"interfaceMode,omitempty"`

	// 是否锁定解锁锁定:locked,解锁unlocked
	Locked string `json:"locked,omitempty"`

	// 是否锁定解锁锁定:已解锁,已锁定
	LockedName string `json:"lockedName,omitempty"`

	// 内存数量
	MemAmount int64 `json:"memAmount,omitempty"`

	// 内存主频（MHz)
	MemFrequency int64 `json:"memFrequency,omitempty"`

	// 单个内存大小(GB)
	MemSize int64 `json:"memSize,omitempty"`

	// 内存接口（如DDR3，DDR4）
	MemType string `json:"memType,omitempty"`

	// 网卡数量
	NicAmount int64 `json:"nicAmount,omitempty"`

	// 网卡传输速率(GE)
	NicRate int64 `json:"nicRate,omitempty"`

	// 内网IPV4
	PrivateIPV4 string `json:"privateIpv4,omitempty"`

	// 内网IPV6
	PrivateIPV6 string `json:"privateIpv6,omitempty"`

	// 实例所属项目UUID
	ProjectID string `json:"projectId,omitempty"`

	// 系统盘raid配置
	RaidCan string `json:"raidCan,omitempty"`

	// 实例错误状态时的错误原因
	Reason string `json:"reason,omitempty"`

	// 设备SN
	Sn string `json:"sn,omitempty"`

	// 运行状态
	Status string `json:"status,omitempty"`

	// 运行状态中文名字
	StatusName string `json:"statusName,omitempty"`

	// 系统盘数量
	SystemVolumeAmount int64 `json:"systemVolumeAmount,omitempty"`

	// 系统盘接口类型（SATA,SAS,NVME）
	SystemVolumeInterfaceType string `json:"systemVolumeInterfaceType,omitempty"`

	// 系统盘raidId
	SystemVolumeRaidID string `json:"systemVolumeRaidId,omitempty"`

	// 系统盘raid名称
	SystemVolumeRaidName string `json:"systemVolumeRaidName,omitempty"`

	// 系统盘单盘大小
	SystemVolumeSize int64 `json:"systemVolumeSize,omitempty"`

	// 系统盘类型（SSD，HDD）
	SystemVolumeType string `json:"systemVolumeType,omitempty"`

	// 系统盘单位
	SystemVolumeUnit string `json:"systemVolumeUnit,omitempty"`

	// 更新者
	UpdatedBy string `json:"updatedBy,omitempty"`

	// 更新时间
	UpdatedTime string `json:"updatedTime,omitempty"`

	// 实例所属用户UUID
	UserID string `json:"userId,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceVolumeRaids(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateInstanceVolumeRaids(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceVolumeRaids) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceVolumeRaids); i++ {
		if swag.IsZero(m.InstanceVolumeRaids[i]) { // not required
			continue
		}

		if m.InstanceVolumeRaids[i] != nil {
			if err := m.InstanceVolumeRaids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeRaid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeRaid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceVolumeRaids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateInstanceVolumeRaids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceVolumeRaids); i++ {

		if m.InstanceVolumeRaids[i] != nil {
			if err := m.InstanceVolumeRaids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeRaid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeRaid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
